[{"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\index.js":"1","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\App.js":"2","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reportWebVitals.js":"3","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\store.js":"4","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\styled-components\\theme.js":"5","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userPostsReducer.js":"6","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\groupsReducer.js":"7","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\postsReducer.js":"8","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userReducer.js":"9","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userPostVotesReducer.js":"10","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\groupSubscribesReducer.js":"11","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\notificationReducer.js":"12","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\redirectReducer.js":"13","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userBookmarksReducer.js":"14","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\toastReducer.js":"15","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\commentVotesReducer.js":"16","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Body.elements.js":"17","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Sandbox.jsx":"18","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostView\\PostView.jsx":"19","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupForm\\GroupForm.jsx":"20","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostForm\\PostForm.jsx":"21","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\ScrollToTop\\ScrollToTop.jsx":"22","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\RegisterForm\\RegisterForm.jsx":"23","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupList\\GroupList.jsx":"24","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageForm\\MessageForm.jsx":"25","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\LoginForm\\LoginForm.jsx":"26","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserView\\UserView.jsx":"27","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Toast\\Toast.jsx":"28","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\NotFound\\NotFound.jsx":"29","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\InboxView\\InboxView.jsx":"30","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageView\\MessageView.jsx":"31","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\SingleGroupView\\SingleGroupView.jsx":"32","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Navigation\\Navigation.jsx":"33","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\HomePage\\HomePage.jsx":"34","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\NavLink.elements.js":"35","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\messages.js":"36","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\posts.js":"37","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\userPostVotes.js":"38","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\groups.js":"39","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\userHistory.js":"40","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\comments.js":"41","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\bookmarks.js":"42","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\commentVotes.js":"43","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\users.js":"44","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Form.elements.js":"45","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\SingleGroupView\\SingleGroupView.elements.js":"46","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\ButtonGroup.elements.js":"47","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageView\\MessageView.elements.js":"48","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\InboxView\\InboxView.elements.js":"49","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Button.elements.js":"50","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Navigation\\Navigation.elements.js":"51","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Toast\\Toast.elements.js":"52","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\PostList.jsx":"53","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupList\\GroupList.elements.js":"54","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FormWarning\\FormWarning.jsx":"55","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Post\\Post.jsx":"56","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comments\\Comments.jsx":"57","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserCard\\UserCard.jsx":"58","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupActions\\GroupActions.jsx":"59","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\DeleteConfirmation\\DeleteConfirmation.jsx":"60","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupInfo\\GroupInfo.jsx":"61","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupCard\\GroupCard.jsx":"62","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\helpers.js":"63","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\PostList.elements.js":"64","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comments\\Comments.elements.js":"65","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\DeleteConfirmation\\DeleteConfirmation.elements.js":"66","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserCard\\UserCard.elements.js":"67","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupActions\\GroupActions.elements.js":"68","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupInfo\\GroupInfo.elements.js":"69","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\PostHeader.jsx":"70","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupCard\\GroupCard.elements.js":"71","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FollowButton\\FollowButton.jsx":"72","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comment\\Comment.jsx":"73","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\PostHeader.elements.js":"74","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FollowButton\\FollowButton.elements.js":"75","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comment\\Comment.elements.js":"76","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\custom-hooks\\useScreenWidth.jsx":"77","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\BookmarkButton\\BookmarkButton.jsx":"78","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\BookmarkButton\\BookMarkButton.elements.js":"79"},{"size":808,"mtime":1625119683714,"results":"80","hashOfConfig":"81"},{"size":4159,"mtime":1628663362005,"results":"82","hashOfConfig":"81"},{"size":375,"mtime":1625119683676,"results":"83","hashOfConfig":"81"},{"size":1315,"mtime":1630344506731,"results":"84","hashOfConfig":"81"},{"size":146,"mtime":1625119683719,"results":"85","hashOfConfig":"81"},{"size":695,"mtime":1630518206772,"results":"86","hashOfConfig":"81"},{"size":828,"mtime":1625119683702,"results":"87","hashOfConfig":"81"},{"size":2698,"mtime":1625119683696,"results":"88","hashOfConfig":"81"},{"size":4796,"mtime":1630518150842,"results":"89","hashOfConfig":"81"},{"size":1767,"mtime":1625119683686,"results":"90","hashOfConfig":"81"},{"size":1291,"mtime":1630518328627,"results":"91","hashOfConfig":"81"},{"size":845,"mtime":1625119683699,"results":"92","hashOfConfig":"81"},{"size":554,"mtime":1625119683694,"results":"93","hashOfConfig":"81"},{"size":1347,"mtime":1625119683688,"results":"94","hashOfConfig":"81"},{"size":650,"mtime":1625119683691,"results":"95","hashOfConfig":"81"},{"size":1853,"mtime":1625119683710,"results":"96","hashOfConfig":"81"},{"size":478,"mtime":1625119683736,"results":"97","hashOfConfig":"81"},{"size":4318,"mtime":1625119683760,"results":"98","hashOfConfig":"81"},{"size":1471,"mtime":1628663362012,"results":"99","hashOfConfig":"81"},{"size":3336,"mtime":1625119683812,"results":"100","hashOfConfig":"81"},{"size":4746,"mtime":1628663362009,"results":"101","hashOfConfig":"81"},{"size":258,"mtime":1625119683759,"results":"102","hashOfConfig":"81"},{"size":5035,"mtime":1625119683762,"results":"103","hashOfConfig":"81"},{"size":4940,"mtime":1625119683804,"results":"104","hashOfConfig":"81"},{"size":2514,"mtime":1625119683791,"results":"105","hashOfConfig":"81"},{"size":3449,"mtime":1625119683793,"results":"106","hashOfConfig":"81"},{"size":8947,"mtime":1630468547279,"results":"107","hashOfConfig":"81"},{"size":570,"mtime":1625119683747,"results":"108","hashOfConfig":"81"},{"size":254,"mtime":1625119683781,"results":"109","hashOfConfig":"81"},{"size":7171,"mtime":1630468982019,"results":"110","hashOfConfig":"81"},{"size":2900,"mtime":1630469359125,"results":"111","hashOfConfig":"81"},{"size":5234,"mtime":1625119683755,"results":"112","hashOfConfig":"81"},{"size":4860,"mtime":1630518362859,"results":"113","hashOfConfig":"81"},{"size":4202,"mtime":1625119683803,"results":"114","hashOfConfig":"81"},{"size":510,"mtime":1625119683725,"results":"115","hashOfConfig":"81"},{"size":2217,"mtime":1630489319380,"results":"116","hashOfConfig":"81"},{"size":4884,"mtime":1632606343545,"results":"117","hashOfConfig":"81"},{"size":918,"mtime":1630344506729,"results":"118","hashOfConfig":"81"},{"size":3068,"mtime":1630344506727,"results":"119","hashOfConfig":"81"},{"size":868,"mtime":1630344506729,"results":"120","hashOfConfig":"81"},{"size":2274,"mtime":1630344506727,"results":"121","hashOfConfig":"81"},{"size":2114,"mtime":1630344506725,"results":"122","hashOfConfig":"81"},{"size":1410,"mtime":1630344506726,"results":"123","hashOfConfig":"81"},{"size":1249,"mtime":1630344506730,"results":"124","hashOfConfig":"81"},{"size":867,"mtime":1630344799218,"results":"125","hashOfConfig":"81"},{"size":306,"mtime":1625119683756,"results":"126","hashOfConfig":"81"},{"size":969,"mtime":1625119683730,"results":"127","hashOfConfig":"81"},{"size":826,"mtime":1625119683788,"results":"128","hashOfConfig":"81"},{"size":547,"mtime":1625119683800,"results":"129","hashOfConfig":"81"},{"size":2055,"mtime":1625119683732,"results":"130","hashOfConfig":"81"},{"size":3881,"mtime":1625119683784,"results":"131","hashOfConfig":"81"},{"size":932,"mtime":1625119683752,"results":"132","hashOfConfig":"81"},{"size":2125,"mtime":1625119683774,"results":"133","hashOfConfig":"81"},{"size":860,"mtime":1630345179450,"results":"134","hashOfConfig":"81"},{"size":258,"mtime":1625119683821,"results":"135","hashOfConfig":"81"},{"size":7458,"mtime":1625119683780,"results":"136","hashOfConfig":"81"},{"size":4595,"mtime":1630487445524,"results":"137","hashOfConfig":"81"},{"size":1161,"mtime":1625119683744,"results":"138","hashOfConfig":"81"},{"size":2367,"mtime":1625119683817,"results":"139","hashOfConfig":"81"},{"size":491,"mtime":1625119683827,"results":"140","hashOfConfig":"81"},{"size":413,"mtime":1625119683808,"results":"141","hashOfConfig":"81"},{"size":2417,"mtime":1625119683813,"results":"142","hashOfConfig":"81"},{"size":1373,"mtime":1625119683771,"results":"143","hashOfConfig":"81"},{"size":3236,"mtime":1625119683776,"results":"144","hashOfConfig":"81"},{"size":136,"mtime":1625119683832,"results":"145","hashOfConfig":"81"},{"size":569,"mtime":1625119683828,"results":"146","hashOfConfig":"81"},{"size":757,"mtime":1625119683745,"results":"147","hashOfConfig":"81"},{"size":1344,"mtime":1630345664627,"results":"148","hashOfConfig":"81"},{"size":559,"mtime":1625119683809,"results":"149","hashOfConfig":"81"},{"size":1005,"mtime":1625119683722,"results":"150","hashOfConfig":"81"},{"size":1443,"mtime":1625119683814,"results":"151","hashOfConfig":"81"},{"size":1891,"mtime":1625119683822,"results":"152","hashOfConfig":"81"},{"size":10834,"mtime":1625119683835,"results":"153","hashOfConfig":"81"},{"size":310,"mtime":1625119683723,"results":"154","hashOfConfig":"81"},{"size":823,"mtime":1625119683823,"results":"155","hashOfConfig":"81"},{"size":2464,"mtime":1625119683837,"results":"156","hashOfConfig":"81"},{"size":428,"mtime":1625119683738,"results":"157","hashOfConfig":"81"},{"size":959,"mtime":1625119683839,"results":"158","hashOfConfig":"81"},{"size":302,"mtime":1625119683840,"results":"159","hashOfConfig":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"48lrnp",{"filePath":"163","messages":"164","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"162"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"162"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"162"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"162"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"162"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"162"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"162"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"162"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"162"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"162"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"162"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"162"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"162"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"162"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"162"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"162"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"162"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"162"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"162"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"162"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"162"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"162"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"162"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"162"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"162"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"162"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"162"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"162"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"162"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"162"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"162"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"350"},"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\index.js",[],["351","352"],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\App.js",["353","354","355","356","357"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nimport { Body, Wrapper } from \"./components/shared/Body.elements\";\r\n\r\nimport { initializePosts } from \"./reducers/postsReducer\";\r\nimport { initializeUserPosts } from \"./reducers/userPostsReducer\";\r\nimport { initializeGroups } from \"./reducers/groupsReducer\";\r\nimport { initializeVotes as initializePostVotes } from \"./reducers/userPostVotesReducer\";\r\nimport { setUser, initializeFollows } from \"./reducers/userReducer\";\r\nimport { initializeSubscriptions } from \"./reducers/groupSubscribesReducer\";\r\n\r\nimport PostView from \"./components/PostView/PostView\";\r\nimport GroupForm from \"./components/GroupForm/GroupForm\";\r\nimport PostForm from \"./components/PostForm/PostForm\";\r\nimport GroupList from \"./components/GroupList/GroupList\";\r\nimport RegisterForm from \"./components/RegisterForm/RegisterForm\";\r\nimport LoginForm from \"./components/LoginForm/LoginForm\";\r\nimport ScrollToTop from \"./components/ScrollToTop/ScrollToTop\";\r\nimport UserView from \"./components/UserView/UserView\";\r\nimport InboxView from \"./components/InboxView/InboxView\";\r\nimport MessageForm from \"./components/MessageForm/MessageForm\";\r\nimport MessageView from \"./components/MessageView/MessageView\";\r\nimport Navigation from \"./components/Navigation/Navigation\";\r\nimport NotFound from \"./components/NotFound/NotFound\";\r\nimport Toast from \"./components/Toast/Toast\";\r\nimport SingleGroupView from \"./components/SingleGroupView/SingleGroupView\";\r\nimport Sandbox from \"./components/Sandbox\";\r\n\r\nimport redditto from \"./redditto.png\";\r\nimport HomePage from \"./components/HomePage/HomePage\";\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const user = useSelector(state => {\r\n    return state.user;\r\n  });\r\n\r\n  const toast = useSelector(state => state.toast);\r\n\r\n  useEffect(() => {\r\n    const initialize = async () => {\r\n      const loggedUser = JSON.parse(localStorage.getItem(\"loggedUser\"));\r\n      if (loggedUser) {\r\n        dispatch(setUser(loggedUser));\r\n        dispatch(initializePosts());\r\n        dispatch(initializeFollows());\r\n        dispatch(initializePostVotes());\r\n        dispatch(initializeSubscriptions());\r\n        console.log(loggedUser);\r\n        dispatch(initializeUserPosts(loggedUser.userId));\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n\r\n    initialize();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(initializePostVotes());\r\n  //   dispatch(initializeSubscriptions());\r\n  //   dispatch(initializeUserPosts(user.userId));\r\n  // }, [user]);\r\n\r\n  return (\r\n    <Router>\r\n      <ScrollToTop />\r\n      <Body>\r\n        <div className=\"App\">\r\n          <Wrapper>\r\n            <Toast message={toast} />\r\n            <Navigation />\r\n            {!loading && (\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <HomePage />\r\n                </Route>\r\n\r\n                <Route exact path=\"/register\" component={RegisterForm} />\r\n                <Route exact path=\"/login\" component={LoginForm} />\r\n                <Route exact path=\"/users/:userId\" component={UserView} />\r\n                <Route exact path=\"/inbox/message\" component={MessageView} />\r\n                <Route exact path=\"/sandbox\" component={Sandbox} />\r\n\r\n                <Route exact path={[\"/groups/:group\"]}>\r\n                  <SingleGroupView />\r\n                </Route>\r\n\r\n                <Route exact path=\"/creategroup\" component={GroupForm} />\r\n                <Route path=\"/create\" component={PostForm} />\r\n\r\n                <Route path=\"/groups/:group/:id\" component={PostView} />\r\n\r\n                <Route exact path=\"/groups\" component={GroupList} />\r\n                <Route exact path=\"/inbox\" component={InboxView} />\r\n                <Route exact path=\"/messages/compose\" component={MessageForm} />\r\n\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            )}\r\n          </Wrapper>\r\n        </div>\r\n      </Body>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reportWebVitals.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\store.js",["358","359"],"import postsReducer from \"./reducers/postsReducer\";\r\nimport groupsReducer from \"./reducers/groupsReducer\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport userPostsReducer from \"./reducers/userPostsReducer\";\r\nimport userPostVotesReducer from \"./reducers/userPostVotesReducer\";\r\nimport userBookmarksReducer from \"./reducers/userBookmarksReducer\";\r\nimport commentVotesReducer from \"./reducers/commentVotesReducer\";\r\nimport notificationReducer from \"./reducers/notificationReducer\";\r\nimport groupSubscribesReducer from \"./reducers/groupSubscribesReducer\";\r\nimport redirectReducer from \"./reducers/redirectReducer\";\r\nimport toastReducer from \"./reducers/toastReducer\";\r\nimport { combineReducers, createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst reducer = combineReducers({\r\n  user: userReducer,\r\n  userPosts: userPostsReducer,\r\n  userPostVotes: userPostVotesReducer,\r\n  userCommentVotes: commentVotesReducer,\r\n  userBookmarks: userBookmarksReducer,\r\n  notification: notificationReducer,\r\n  subscribedGroups: groupSubscribesReducer,\r\n  redirectPath: redirectReducer,\r\n  toast: toastReducer\r\n});\r\n\r\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\styled-components\\theme.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userPostsReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\groupsReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\postsReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userPostVotesReducer.js",["360"],"import userPostVotesService from \"../services/userPostVotes\";\r\nimport postService from \"../services/posts\";\r\n\r\nexport const initializeVotes = () => {\r\n  return async dispatch => {\r\n    const data = await userPostVotesService.getUserPostVotes();\r\n\r\n    dispatch({\r\n      type: \"INITIALIZE_POST_VOTES\",\r\n      data\r\n    });\r\n  };\r\n};\r\n\r\nexport const addVote = (id, vote_value) => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: \"ADD_VOTE\",\r\n      data: {\r\n        id,\r\n        vote_value\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const removeVote = id => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: \"REMOVE_VOTE\",\r\n      data: {\r\n        id\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const switchVote = (postId, newValue) => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: \"SWITCH_VOTE\",\r\n      data: {\r\n        postId,\r\n        newValue\r\n      }\r\n    });\r\n  };\r\n};\r\n\r\nexport const clearVotes = () => {\r\n  return async dispatch => {\r\n    dispatch({\r\n      type: \"CLEAR_POST_VOTES\"\r\n    });\r\n  };\r\n};\r\n\r\nconst reducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"INITIALIZE_POST_VOTES\":\r\n      return action.data;\r\n    case \"ADD_VOTE\":\r\n      return [\r\n        ...state,\r\n        { post_id: action.data.id, vote_value: action.data.vote_value }\r\n      ];\r\n    case \"REMOVE_VOTE\":\r\n      return state.filter(vote => {\r\n        return vote.post_id !== action.data.id;\r\n      });\r\n    case \"SWITCH_VOTE\":\r\n      return state.map(vote => {\r\n        if (vote.post_id === action.data.postId) {\r\n          return { ...vote, vote_value: vote.vote_value * -1 };\r\n        }\r\n        return vote;\r\n      });\r\n    case \"CLEAR_POST_VOTES\":\r\n      return [];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\groupSubscribesReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\notificationReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\redirectReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\userBookmarksReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\toastReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\reducers\\commentVotesReducer.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Body.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Sandbox.jsx",["361","362","363","364","365","366","367","368","369","370","371","372","373","374"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport PostList from \"./PostList/PostList\";\r\n\r\nimport userHistoryService from \"../services/userHistory\";\r\n\r\nimport { setUser } from \"../reducers/userReducer\";\r\n\r\nconst Container = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function Sandbox() {\r\n  /* \r\n    Cases:\r\n      - All posts, no user logged in (done)\r\n      - All posts, user logged in (done)\r\n      - Group posts (done)\r\n      - Groups (done)\r\n      - Inbox (done)\r\n        > Unread\r\n        > All\r\n        > Server\r\n        > Directs\r\n      - User history\r\n        > Overview\r\n        > Submitted\r\n        > Comments\r\n        > Bookmarked\r\n  */\r\n\r\n  /*\r\n    User history pagination\r\n\r\n    GET /userhistory?filter=${filter}&userId=${userId}\r\n\r\n    filter\r\n      - OVERVIEW\r\n      - SUBMITTED\r\n      - COMMENTS\r\n      - BOOKMARKED\r\n\r\n    Comment = {\r\n      post_name\r\n      group_name\r\n      comment.created_at\r\n      comment.content\r\n    }\r\n\r\n    Post = {\r\n      post title\r\n      post.created_at\r\n      group name\r\n      username\r\n      body\r\n    }\r\n\r\n    Overview = { \r\n      group_name (comment/post)\r\n      created_at (comment/post)\r\n      post name\r\n      comment content\r\n      post title\r\n      post username\r\n      post body\r\n    }\r\n\r\n\r\n  */\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n  const [resultsPerPage, setResultsPerPage] = useState(20);\r\n  const [paginationOptions, setPaginationOptions] = useState({\r\n    type: \"OVERVIEW\",\r\n    userId: 25\r\n  });\r\n  const [historyToDisplay, setHistoryToDisplay] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const user = useSelector(state => state.user);\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load\r\n    userHistoryService.countPages(paginationOptions).then(result => {\r\n      setMaxPages(result);\r\n    });\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    // When the page changes, fetch the appropriate data\r\n\r\n    userHistoryService.paginate(paginationOptions, currentPage).then(data => {\r\n      setHistoryToDisplay(data);\r\n      setLoading(false);\r\n    });\r\n  }, [currentPage]);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {currentPage > 1 && (\r\n          <button\r\n            className=\"pagination-button previous\"\r\n            onClick={handlePrevButton}\r\n          >\r\n            Previous\r\n          </button>\r\n        )}\r\n\r\n        <span>\r\n          Page{\" \"}\r\n          <input type=\"text\" value={pageInput} onChange={handlePageInput} /> of{\" \"}\r\n          {maxPages}\r\n        </span>\r\n        {currentPage < maxPages && (\r\n          <button className=\"pagination-button next\" onClick={handleNextButton}>\r\n            Next\r\n          </button>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostView\\PostView.jsx",["375"],"import React, { useEffect, useState } from \"react\";\r\n\r\nimport NotFound from \"../NotFound/NotFound\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { initializeVotes as initializeCommentVotes } from \"../../reducers/commentVotesReducer\";\r\nimport { initializeBookmarks } from \"../../reducers/userBookmarksReducer\";\r\n\r\nimport Comments from \"../Comments/Comments\";\r\n\r\nimport Post from \"../Post/Post\";\r\nimport postService from \"../../services/posts\";\r\n\r\nconst PostView = () => {\r\n  const user = useSelector(state => state.user);\r\n\r\n  const match = useRouteMatch(\"/groups/:group/:id\");\r\n  const [post, setPost] = useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      await dispatch(initializeBookmarks(match.params.id));\r\n      await dispatch(initializeCommentVotes());\r\n    };\r\n    if (user.token !== null) init();\r\n\r\n    postService.getPostById(match.params.id).then(data => {\r\n      setPost(data);\r\n    });\r\n  }, [dispatch]);\r\n\r\n  console.log(post);\r\n\r\n  return (\r\n    <>\r\n      {!post && <NotFound />}\r\n      {post && (\r\n        <div>\r\n          <Post post={post} key={post.postID} expand={true} viewMode={true} />\r\n          <Comments\r\n            postId={post.post_id}\r\n            submitterId={post.submitter_id}\r\n            postTitle={post.title}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostView;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupForm\\GroupForm.jsx",["376","377"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { createGroup } from \"../../reducers/groupsReducer\";\r\n\r\nimport { FormContainer, FormHeader, FormField } from \"../shared/Form.elements\";\r\nimport StyledLink from \"../shared/NavLink.elements\";\r\n\r\nimport groupService from \"../../services/groups\";\r\n\r\nconst GroupForm = () => {\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [blurb, setBlurb] = useState(\"\");\r\n  const [formWarning, setFormWarning] = useState(null);\r\n  const user = useSelector(state => state.user);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Clear warning on new input\r\n    setFormWarning(null);\r\n  }, [groupName]);\r\n\r\n  const validateGroupName = () => {\r\n    // Group names must be alphanumerical and have a length of at least 1\r\n    const alphanumeric = /^[a-zA-Z0-9]*$/;\r\n    return alphanumeric.test(groupName.trim()) && groupName.trim().length > 0;\r\n  };\r\n\r\n  const handleCreateGroup = async e => {\r\n    e.preventDefault();\r\n\r\n    if (!validateGroupName()) {\r\n      setFormWarning(\r\n        \"Group names must be alphanumerical without spaces, and have a length of at least 1\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    const formData = { groupName: groupName.trim(), blurb: blurb.trim() };\r\n\r\n    const res = await groupService.create(formData);\r\n\r\n    if (res.error) {\r\n      return setFormWarning(res.error);\r\n    }\r\n\r\n    history.push(`/groups/${res.group_name}`);\r\n  };\r\n\r\n  const handleSetGroupName = e => {\r\n    setGroupName(e.target.value);\r\n  };\r\n\r\n  const handleSetBlurb = e => {\r\n    setBlurb(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {user.userId === null && (\r\n          <>\r\n            <h2>\r\n              You must be logged in to create a group. Log in{\" \"}\r\n              <StyledLink to=\"/login\">here</StyledLink> or{\" \"}\r\n              <StyledLink to=\"/\">go to the home page</StyledLink>.\r\n            </h2>\r\n          </>\r\n        )}\r\n      </div>\r\n      {user.userId && (\r\n        <FormContainer>\r\n          <FormHeader>Create your own group</FormHeader>\r\n          <form id=\"group-form\" onSubmit={handleCreateGroup}>\r\n            <FormField>\r\n              <label htmlFor=\"group-name\">Group name:</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"group-name\"\r\n                name=\"groupName\"\r\n                value={groupName}\r\n                onChange={handleSetGroupName}\r\n              ></input>\r\n            </FormField>\r\n          </form>\r\n\r\n          <FormField>\r\n            <label htmlFor=\"blurb\">Blurb/description (optional): </label>\r\n            <div>\r\n              <textarea\r\n                name=\"blurb\"\r\n                id=\"blurb\"\r\n                form=\"group-form\"\r\n                value={blurb}\r\n                onChange={handleSetBlurb}\r\n                placeholder=\"What would you like others to know about your group?\"\r\n              ></textarea>\r\n            </div>\r\n          </FormField>\r\n\r\n          <h3 className=\"warning\">{formWarning}</h3>\r\n\r\n          <button type=\"submit\" form=\"group-form\">\r\n            Create Group\r\n          </button>\r\n        </FormContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GroupForm;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostForm\\PostForm.jsx",["378","379","380","381"],"import React, { useState, useEffect } from \"react\";\r\n\r\nimport groupService from \"../../services/groups\";\r\nimport postService from \"../../services/posts\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { createPost } from \"../../reducers/postsReducer\";\r\nimport { initializeVotes as initializePostVotes } from \"../../reducers/userPostVotesReducer\";\r\nimport { initializePosts } from \"../../reducers/postsReducer\";\r\nimport { removeNotification } from \"../../reducers/notificationReducer\";\r\nimport { addPostToUser } from \"../../reducers/userReducer\";\r\nimport { addVote } from \"../../reducers/userPostVotesReducer\";\r\n\r\nimport FormWarning from \"../FormWarning/FormWarning\";\r\n\r\nimport { FormContainer, FormHeader, FormField } from \"../shared/Form.elements\";\r\nimport StyledLink from \"../shared/NavLink.elements\";\r\n\r\nimport queryString from \"query-string\";\r\n\r\nconst PostForm = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const currentUser = useSelector(state => state.user);\r\n  const { search } = useLocation();\r\n\r\n  const currentGroup = queryString.parse(search).group;\r\n  const [groupName, setGroupName] = useState(null);\r\n  const [groupId, setGroupId] = useState(null);\r\n\r\n  // Verify this group exists\r\n  useEffect(() => {\r\n    groupService.verifyGroupByName(currentGroup).then(result => {\r\n      if (!result) {\r\n        console.log(\"This group does not exist\");\r\n      } else {\r\n        setGroupName(currentGroup);\r\n        setGroupId(result);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Clear notification on component unmount/view change\r\n  useEffect(() => {\r\n    return () => dispatch(removeNotification());\r\n  }, [dispatch]);\r\n\r\n  const handleSetTitle = e => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const handleSetContent = e => {\r\n    setContent(e.target.value);\r\n  };\r\n\r\n  const addPost = async e => {\r\n    e.preventDefault();\r\n    const data = { title, group_id: groupId, content };\r\n\r\n    const newPost = await postService.createPost(data);\r\n\r\n    console.log(newPost);\r\n\r\n    if (newPost) {\r\n      // dispatch(addVote(newPost.post_id, 1));\r\n      dispatch(initializePostVotes());\r\n      dispatch(initializePosts());\r\n      dispatch(addPostToUser(newPost));\r\n      history.push(`/groups/${groupName}/${newPost.post_id}`);\r\n\r\n      // Update localStorage to reflect them adding a new post\r\n      let user = JSON.parse(localStorage.getItem(\"loggedUser\"));\r\n\r\n      user = { ...user, userPosts: [...user.userPosts, newPost.postID] };\r\n      localStorage.setItem(\"loggedUser\", JSON.stringify(user));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        {groupName === null && (\r\n          <p>\r\n            The group \"{currentGroup}\" does not exist.{\" \"}\r\n            <StyledLink to=\"/groups\">Browse our existing groups</StyledLink>.\r\n          </p>\r\n        )}\r\n        {currentUser.userId === null && (\r\n          <>\r\n            <h2>\r\n              You must be logged in to create a post.{\" \"}\r\n              <StyledLink to=\"/login\">Log in</StyledLink> or{\" \"}\r\n              <StyledLink to=\"/\">go to the home page</StyledLink>.\r\n            </h2>\r\n          </>\r\n        )}\r\n      </div>\r\n      {currentUser.userId && !!groupName && (\r\n        <FormContainer>\r\n          <FormHeader>\r\n            Create a new post for <strong>{groupName}</strong>\r\n          </FormHeader>\r\n          <form onSubmit={addPost} id=\"post-form\">\r\n            <FormField>\r\n              <label htmlFor=\"title\">Title: </label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                placeholder=\"title\"\r\n                value={title}\r\n                onChange={handleSetTitle}\r\n              ></input>\r\n            </FormField>\r\n            {/* <FormField>\r\n              <label htmlFor=\"group\">Group: </label>\r\n              <Select value={groupQuery} onChange={handleSetGroupQuery} />\r\n            </FormField> */}\r\n          </form>\r\n          <div>\r\n            <FormField>\r\n              <label htmlFor=\"content\">Content: </label>\r\n              <div>\r\n                <textarea\r\n                  name=\"content\"\r\n                  form=\"post-form\"\r\n                  value={content}\r\n                  onChange={handleSetContent}\r\n                ></textarea>\r\n              </div>\r\n            </FormField>\r\n\r\n            <button type=\"submit\" form=\"post-form\">\r\n              Create Post\r\n            </button>\r\n          </div>\r\n          <FormWarning />\r\n        </FormContainer>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\ScrollToTop\\ScrollToTop.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\RegisterForm\\RegisterForm.jsx",["382"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { login, register } from \"../../reducers/userReducer\";\r\nimport {\r\n  removeNotification,\r\n  setNotification\r\n} from \"../../reducers/notificationReducer\";\r\n\r\nimport FormWarning from \"../FormWarning/FormWarning\";\r\n\r\nimport { FormContainer, FormHeader, FormField } from \"../shared/Form.elements\";\r\n\r\nconst RegisterForm = () => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  // Clear notification on component unmount/view change\r\n  useEffect(() => {\r\n    return () => dispatch(removeNotification());\r\n  }, [dispatch]);\r\n\r\n  // Clear notification on form input\r\n  useEffect(() => {\r\n    dispatch(removeNotification());\r\n  }, [username, email, password, confirmPassword]);\r\n\r\n  const handleSetUsername = e => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const handleSetEmail = e => {\r\n    setEmail(e.target.value);\r\n  };\r\n\r\n  const handleSetPassword = e => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  const handleSetConfirmPassword = e => {\r\n    setConfirmPassword(e.target.value);\r\n  };\r\n\r\n  let creatingPost;\r\n\r\n  try {\r\n    creatingPost = location.state.creatingPost;\r\n  } catch (e) {\r\n    creatingPost = false;\r\n  }\r\n\r\n  const validateRegistration = data => {\r\n    // All fields must be filled in\r\n\r\n    const formValues = Object.values(data);\r\n\r\n    for (let i = 0; i < formValues.length; i++) {\r\n      if (formValues[i].trim().length === 0) {\r\n        dispatch(setNotification(\"All fields must be filled in\"));\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Passwords must match\r\n    if (data.password !== data.confirmPassword) {\r\n      dispatch(setNotification(\"Passwords do not match\"));\r\n      return false;\r\n    }\r\n    // E-mail must be valid\r\n    const mailformat = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    const emailValid = data.email.match(mailformat);\r\n\r\n    if (!emailValid) {\r\n      dispatch(setNotification(\"E-mail must be valid\"));\r\n      return false;\r\n    }\r\n\r\n    // Alphanumeric usernames only\r\n    const alphanumeric = /^[a-z0-9]+$/i;\r\n    if (!alphanumeric.test(data.username)) {\r\n      dispatch(\r\n        setNotification(\"Username must contain alphanumeric characters only\")\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // Username must be 20 chars or less\r\n    if (username.trim().length > 20) {\r\n      dispatch(setNotification(\"Username must be 20 characters or less\"));\r\n      return false;\r\n    }\r\n\r\n    // Validation passes\r\n    return true;\r\n  };\r\n\r\n  const handleRegistration = async e => {\r\n    e.preventDefault();\r\n    const data = { username, email, password, confirmPassword };\r\n\r\n    // Front end validation\r\n    if (!validateRegistration(data)) return;\r\n\r\n    const success = await dispatch(register({ data }));\r\n\r\n    if (success) {\r\n      // If account creation successful, automatically log them in\r\n      dispatch(login({ username: data.username, password: data.password }));\r\n      if (creatingPost) {\r\n        history.push(\"/create\");\r\n      } else {\r\n        history.push(`/`);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormContainer>\r\n      <FormHeader>Register</FormHeader>\r\n      <form id=\"register-form\" onSubmit={handleRegistration}>\r\n        <FormField>\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            value={username}\r\n            onChange={handleSetUsername}\r\n          ></input>\r\n        </FormField>\r\n        <FormField>\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleSetEmail}\r\n          ></input>\r\n        </FormField>\r\n        <FormField>\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleSetPassword}\r\n          ></input>\r\n        </FormField>\r\n        <FormField>\r\n          <label htmlFor=\"confirm-password\">Confirm password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"confirm-password\"\r\n            name=\"confirm-password\"\r\n            value={confirmPassword}\r\n            onChange={handleSetConfirmPassword}\r\n          ></input>\r\n        </FormField>\r\n      </form>\r\n      <button type=\"submit\" form=\"register-form\">\r\n        Register\r\n      </button>\r\n      <FormWarning />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupList\\GroupList.jsx",["383","384","385"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { Container, GroupListHeader, Wrapper } from \"./GroupList.elements\";\r\n\r\nimport GroupCard from \"../GroupCard/GroupCard\";\r\n\r\nimport { setRedirectPath } from \"../../reducers/redirectReducer\";\r\n\r\nimport groupService from \"../../services/groups\";\r\n\r\nconst Pagination = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nconst GroupList = () => {\r\n  const [searchBy, setSearchBy] = useState(\"name\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  const [groupsToDisplay, setGroupsToDisplay] = useState([]);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n\r\n  const loggedUser = useSelector(state => state.user);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load\r\n\r\n    groupService.countPages().then(result => {\r\n      setMaxPages(result);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // When the page changes, fetch the appropriate data\r\n\r\n    groupService.paginate(currentPage).then(data => {\r\n      setGroupsToDisplay(data);\r\n    });\r\n  }, [currentPage]);\r\n\r\n  const handleCreateGroupButton = () => {\r\n    if (loggedUser.userId !== null) {\r\n      history.push(\"/creategroup\");\r\n    } else {\r\n      dispatch(setRedirectPath(\"/creategroup\"));\r\n      history.push({\r\n        pathname: \"/login\",\r\n        state: {\r\n          headerMessage: \"Log in to create a group\",\r\n          creatingGroup: true\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const filterGroups = groups => {\r\n    let result = groups.filter(group => {\r\n      if (searchBy === \"name\") {\r\n        return group.group_name\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n      } else if (searchBy === \"blurb\") {\r\n        return group.blurb.toLowerCase().includes(searchTerm.toLowerCase());\r\n      } else {\r\n        return group;\r\n      }\r\n    });\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <GroupListHeader>\r\n        <button\r\n          onClick={handleCreateGroupButton}\r\n          className=\"create-group-button\"\r\n        >\r\n          {\" \"}\r\n          <FontAwesome name=\"users\" className=\"fa-users\" />\r\n          Create your own group\r\n        </button>\r\n      </GroupListHeader>\r\n      <Container>\r\n        {groupsToDisplay.length !== 0\r\n          ? filterGroups(groupsToDisplay).map((group, index) => {\r\n              return <GroupCard group={group} key={index} />;\r\n            })\r\n          : \"\"}\r\n      </Container>\r\n      {groupsToDisplay.length === 0 && (\r\n        <h3>Be the first one to create a group!</h3>\r\n      )}\r\n      {groupsToDisplay.length !== 0 && (\r\n        <Pagination>\r\n          {currentPage > 1 && (\r\n            <button\r\n              className=\"pagination-button previous\"\r\n              onClick={handlePrevButton}\r\n            >\r\n              Previous\r\n            </button>\r\n          )}\r\n\r\n          <span>\r\n            Page{\" \"}\r\n            <input type=\"text\" value={pageInput} onChange={handlePageInput} />{\" \"}\r\n            of {maxPages}\r\n          </span>\r\n          {currentPage < maxPages && (\r\n            <button\r\n              className=\"pagination-button next\"\r\n              onClick={handleNextButton}\r\n            >\r\n              Next\r\n            </button>\r\n          )}\r\n        </Pagination>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default GroupList;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageForm\\MessageForm.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\LoginForm\\LoginForm.jsx",["386"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useLocation, Link } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { FormContainer, FormHeader, FormField } from \"../shared/Form.elements\";\r\n\r\nimport { login } from \"../../reducers/userReducer\";\r\nimport { initializeVotes as initializePostVotes } from \"../../reducers/userPostVotesReducer\";\r\nimport { initializeSubscriptions } from \"../../reducers/groupSubscribesReducer\";\r\nimport { clearRedirectPath } from \"../../reducers/redirectReducer\";\r\nimport { removeNotification } from \"../../reducers/notificationReducer\";\r\nimport { initializeUserPosts } from \"../../reducers/userPostsReducer\";\r\nimport { setUser, initializeFollows } from \"../../reducers/userReducer\";\r\n\r\nimport FormWarning from \"../FormWarning/FormWarning\";\r\n\r\nconst LoginForm = props => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const redirectPath = useSelector(state => state.redirectPath);\r\n\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const handleSetUsername = e => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const handleSetPassword = e => {\r\n    setPassword(e.target.value);\r\n  };\r\n\r\n  // Clear notification, redirect path on component unmount/view change\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(removeNotification());\r\n      dispatch(clearRedirectPath());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const handleLogin = async e => {\r\n    e.preventDefault();\r\n    const credentials = { username, password };\r\n\r\n    const loginSuccess = await dispatch(login(credentials));\r\n\r\n    if (loginSuccess) {\r\n      dispatch(initializeFollows());\r\n      dispatch(initializePostVotes());\r\n      dispatch(initializeSubscriptions());\r\n      dispatch(initializeUserPosts(loginSuccess.userId));\r\n      localStorage.setItem(\"loggedUser\", JSON.stringify(loginSuccess));\r\n      if (redirectPath) {\r\n        history.push(redirectPath);\r\n      } else {\r\n        history.push(`/`);\r\n      }\r\n    }\r\n  };\r\n\r\n  let headerMessage = location.state?.headerMessage || \"Login\";\r\n  let creatingPost = location.state?.creatingPost || false; // Did the user end up here from attempting to make a new post while not logged in?\r\n\r\n  return (\r\n    <FormContainer>\r\n      <FormHeader>{headerMessage}</FormHeader>\r\n      <form id=\"login-form\" onSubmit={handleLogin}>\r\n        <FormField>\r\n          <label htmlFor=\"username\">Username:</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            value={username}\r\n            onChange={handleSetUsername}\r\n          ></input>\r\n        </FormField>\r\n        <FormField>\r\n          <label htmlFor=\"password\">Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleSetPassword}\r\n          ></input>\r\n        </FormField>\r\n      </form>\r\n\r\n      <p>\r\n        New user? Register{\" \"}\r\n        <Link\r\n          to={{\r\n            pathname: \"/register\",\r\n            state: { creatingPost }\r\n          }}\r\n        >\r\n          here\r\n        </Link>\r\n        .\r\n      </p>\r\n\r\n      <button type=\"submit\" form=\"login-form\">\r\n        Login\r\n      </button>\r\n      <FormWarning />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserView\\UserView.jsx",["387","388","389","390","391"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport userService from \"../../services/users\";\r\nimport postService from \"../../services/posts\";\r\nimport commentService from \"../../services/comments\";\r\nimport bookmarkService from \"../../services/bookmarks\";\r\nimport userHistoryService from \"../../services/userHistory\";\r\n\r\nimport NotFound from \"../NotFound/NotFound\";\r\n\r\nimport NavLink from \"../shared/NavLink.elements.js\";\r\nimport ButtonGroup from \"../shared/ButtonGroup.elements\";\r\n\r\nimport Post from \"../Post/Post\";\r\n\r\nimport moment from \"moment\";\r\n\r\nconst Container = styled.div`\r\n  /* display: flex; */\r\n`;\r\n\r\nconst ProfileInfo = styled.div`\r\n  text-align: center;\r\n  line-height: 2;\r\n  margin-bottom: 2rem;\r\n  img {\r\n    height: 150px;\r\n  }\r\n`;\r\n\r\nconst UserHistory = styled.div`\r\n  flex: 1;\r\n`;\r\n\r\nconst CommentItem = styled.div`\r\n  border-bottom: 1px solid #dddddd;\r\n  margin-bottom: 1rem;\r\n  padding: 0 0.625rem 1rem 0.25rem;\r\n`;\r\n\r\nconst Pagination = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function UserView() {\r\n  const match = useRouteMatch(\"/users/:id\");\r\n  const history = useHistory();\r\n\r\n  const [user, setUser] = useState({});\r\n\r\n  const loggedUserId = useSelector(state => state.user.userId);\r\n  const [matchesLoggedUser, setMatchesLoggedUser] = useState(false);\r\n\r\n  const [paginationOptions, setPaginationOptions] = useState({\r\n    type: \"OVERVIEW\",\r\n    userId: match.params.id\r\n  });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n\r\n  const [historyToDisplay, setHistoryToDisplay] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load, type change\r\n    userHistoryService.countPages(paginationOptions).then(result => {\r\n      setMaxPages(result);\r\n    });\r\n    setCurrentPage(1);\r\n    setPageInput(1);\r\n  }, [paginationOptions.type]);\r\n\r\n  useEffect(() => {\r\n    // When the page/type changes, fetch the appropriate data\r\n\r\n    userHistoryService.paginate(paginationOptions, currentPage).then(data => {\r\n      setHistoryToDisplay(data);\r\n    });\r\n  }, [currentPage, paginationOptions.type]);\r\n\r\n  useEffect(() => {\r\n    userService.getUserById(match.params.id).then(data => {\r\n      setUser(data);\r\n    });\r\n\r\n    setMatchesLoggedUser(loggedUserId === Number(match.params.id));\r\n  }, [match.params.id, loggedUserId]);\r\n\r\n  const handleSendMessageButton = () => {\r\n    history.push({\r\n      pathname: \"/messages/compose\",\r\n      state: {\r\n        recipient_id: user.id\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!user && <NotFound />}\r\n      {user && (\r\n        <Container>\r\n          <ProfileInfo>\r\n            <h2>{user.username}</h2>\r\n            <p>Account created {moment(user.created_at).fromNow()}</p>\r\n            {(() => {\r\n              if (loggedUserId !== null && matchesLoggedUser === false) {\r\n                return (\r\n                  <button onClick={handleSendMessageButton} id=\"send-message\">\r\n                    Send message\r\n                  </button>\r\n                );\r\n              }\r\n            })()}\r\n          </ProfileInfo>\r\n          <ButtonGroup>\r\n            <li\r\n              className={paginationOptions.type === \"OVERVIEW\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"OVERVIEW\"\r\n                }))\r\n              }\r\n            >\r\n              Overview\r\n            </li>\r\n            <li\r\n              className={paginationOptions.type === \"SUBMITTED\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"SUBMITTED\"\r\n                }))\r\n              }\r\n            >\r\n              Submitted\r\n            </li>\r\n            <li\r\n              className={paginationOptions.type === \"COMMENTS\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"COMMENTS\"\r\n                }))\r\n              }\r\n            >\r\n              Comments\r\n            </li>\r\n            {matchesLoggedUser && (\r\n              <li\r\n                className={\r\n                  paginationOptions.type === \"BOOKMARKED\" ? \"active\" : \"\"\r\n                }\r\n                onClick={() =>\r\n                  setPaginationOptions(prevState => ({\r\n                    ...prevState,\r\n                    type: \"BOOKMARKED\"\r\n                  }))\r\n                }\r\n              >\r\n                Bookmarked\r\n              </li>\r\n            )}\r\n          </ButtonGroup>\r\n          <UserHistory>\r\n            <br />\r\n            <div>\r\n              {(() => {\r\n                return historyToDisplay.map((item, index) => {\r\n                  if (item.comment_body === null) {\r\n                    console.log(item);\r\n                    return <Post post={item} options={false} key={index} />;\r\n                  } else {\r\n                    return (\r\n                      <CommentItem key={index}>\r\n                        <p>\r\n                          <NavLink\r\n                            to={`/groups/${item.group_name.toLowerCase()}/${\r\n                              item.post_id\r\n                            }`}\r\n                          >\r\n                            {item.title}\r\n                          </NavLink>{\" \"}\r\n                          in{\" \"}\r\n                          <NavLink\r\n                            to={`/groups/${item.group_name.toLowerCase()}`}\r\n                          >\r\n                            {item.group_name}\r\n                          </NavLink>{\" \"}\r\n                          (\r\n                          {item.type === \"bookmark\"\r\n                            ? \"Bookmarked\"\r\n                            : \"Commented\"}{\" \"}\r\n                          {moment(item.created_at).fromNow()})\r\n                        </p>\r\n                        <p>{item.comment_body}</p>\r\n                      </CommentItem>\r\n                    );\r\n                  }\r\n                });\r\n              })()}\r\n            </div>\r\n          </UserHistory>\r\n          {historyToDisplay.length === 0 &&\r\n            paginationOptions.type !== \"BOOKMARKED\" && (\r\n              <h3>No relevant history found for this user</h3>\r\n            )}\r\n          {historyToDisplay.length === 0 &&\r\n            paginationOptions.type === \"BOOKMARKED\" && (\r\n              <h3>Bookmark comments you like and view them all here!</h3>\r\n            )}\r\n          {historyToDisplay.length !== 0 && (\r\n            <Pagination>\r\n              {currentPage > 1 && (\r\n                <button\r\n                  className=\"pagination-button previous\"\r\n                  onClick={handlePrevButton}\r\n                >\r\n                  Previous\r\n                </button>\r\n              )}\r\n\r\n              <span>\r\n                Page{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  value={pageInput}\r\n                  onChange={handlePageInput}\r\n                />{\" \"}\r\n                of {maxPages}\r\n              </span>\r\n              {currentPage < maxPages && (\r\n                <button\r\n                  className=\"pagination-button next\"\r\n                  onClick={handleNextButton}\r\n                >\r\n                  Next\r\n                </button>\r\n              )}\r\n            </Pagination>\r\n          )}\r\n        </Container>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Toast\\Toast.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\NotFound\\NotFound.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\InboxView\\InboxView.jsx",["392","393","394","395"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { setUser } from \"../../reducers/userReducer\";\r\n\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nimport { Message, MessageHeader } from \"./InboxView.elements\";\r\nimport StyledLink from \"../shared/NavLink.elements\";\r\nimport ButtonGroup from \"../shared/ButtonGroup.elements\";\r\nimport messageService from \"../../services/messages\";\r\n\r\nconst Pagination = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function InboxView() {\r\n  const [messagesToDisplay, setMessagesToDisplay] = useState([]);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n  const [paginationOptions, setPaginationOptions] = useState({\r\n    type: \"UNREAD\"\r\n  });\r\n\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n  const history = useHistory();\r\n\r\n  // Go back to page 1 when the filter changes\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n    setPageInput(1);\r\n  }, [paginationOptions.type]);\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load, filter change\r\n    messageService.countPages(paginationOptions).then(result => {\r\n      setMaxPages(result);\r\n    });\r\n  }, [user, paginationOptions.type]);\r\n\r\n  useEffect(() => {\r\n    // When the page/filter changes, fetch the appropriate data\r\n\r\n    messageService.paginate(paginationOptions, currentPage).then(data => {\r\n      setMessagesToDisplay(data);\r\n    });\r\n  }, [currentPage, paginationOptions.type]);\r\n\r\n  const openMessage = message => {\r\n    console.log(message);\r\n    history.push({\r\n      pathname: \"/inbox/message\",\r\n      state: {\r\n        subject: message.subject,\r\n        sender: message.sender_username,\r\n        senderId: message.sender_id,\r\n        time: message.created_at,\r\n        body: message.content,\r\n        id: message.id\r\n      }\r\n    });\r\n    messageService.setRead(message.id);\r\n  };\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {user.userId === null && (\r\n        <>\r\n          <h2>\r\n            You must be logged in to view your inbox. Log in{\" \"}\r\n            <StyledLink to=\"/login\">here</StyledLink> or{\" \"}\r\n            <StyledLink to=\"/\">go to the home page</StyledLink>.\r\n          </h2>\r\n        </>\r\n      )}\r\n      {user.userId && (\r\n        <>\r\n          <h1>Messages</h1>\r\n          <ButtonGroup>\r\n            <li\r\n              className={paginationOptions.type === \"UNREAD\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"UNREAD\"\r\n                }))\r\n              }\r\n            >\r\n              Unread\r\n            </li>\r\n            <li\r\n              className={paginationOptions.type === \"ALL\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"ALL\"\r\n                }))\r\n              }\r\n            >\r\n              All\r\n            </li>\r\n\r\n            <li\r\n              className={paginationOptions.type === \"SERVER\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"SERVER\"\r\n                }))\r\n              }\r\n            >\r\n              Server\r\n            </li>\r\n            <li\r\n              className={paginationOptions.type === \"DIRECTS\" ? \"active\" : \"\"}\r\n              onClick={() =>\r\n                setPaginationOptions(prevState => ({\r\n                  ...prevState,\r\n                  type: \"DIRECTS\"\r\n                }))\r\n              }\r\n            >\r\n              Direct Messages\r\n            </li>\r\n          </ButtonGroup>\r\n          {messagesToDisplay.length === 0 && <h3>There's nothing here.</h3>}\r\n          {messagesToDisplay.map((message, index) => (\r\n            <Message\r\n              className={\r\n                [parseInt(message.has_read) === 1 ? \".message-read\" : \"\", \"message\"]\r\n              }\r\n              onClick={() => openMessage(message)}\r\n              key={index}\r\n            >\r\n              <MessageHeader>\r\n                <p>\r\n                  <strong>\r\n                    {message.sender_id\r\n                      ? message.sender_username\r\n                      : \"(server message)\"}\r\n                  </strong>{\" \"}\r\n                  -{\" \"}\r\n                  {message.subject ? (\r\n                    <strong>{message.subject}</strong>\r\n                  ) : (\r\n                    \"no subject\"\r\n                  )}\r\n                </p>\r\n                <p>\r\n                  {moment(message.created_at).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n                </p>\r\n              </MessageHeader>\r\n\r\n              <p>{message.content}</p>\r\n            </Message>\r\n          ))}\r\n          {messagesToDisplay.length !== 0 && (\r\n            <Pagination>\r\n              {currentPage > 1 && (\r\n                <button\r\n                  className=\"pagination-button previous\"\r\n                  onClick={handlePrevButton}\r\n                >\r\n                  Previous\r\n                </button>\r\n              )}\r\n\r\n              <span>\r\n                Page{\" \"}\r\n                <input\r\n                  type=\"text\"\r\n                  value={pageInput}\r\n                  onChange={handlePageInput}\r\n                />{\" \"}\r\n                of {maxPages}\r\n              </span>\r\n              {currentPage < maxPages && (\r\n                <button\r\n                  className=\"pagination-button next\"\r\n                  onClick={handleNextButton}\r\n                >\r\n                  Next\r\n                </button>\r\n              )}\r\n            </Pagination>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageView\\MessageView.jsx",["396","397","398"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\r\n\r\nimport messageService from \"../../services/messages\";\r\n\r\nimport moment from \"moment\";\r\n\r\nimport DeleteConfirmation from \"../DeleteConfirmation/DeleteConfirmation\";\r\n\r\nimport {\r\n  Message,\r\n  Sender,\r\n  Time,\r\n  Actions,\r\n  MessageBody,\r\n  ReplyForm\r\n} from \"./MessageView.elements\";\r\n\r\nimport { Button } from \"../shared/Button.elements\";\r\n\r\nimport ButtonGroup from \"../shared/ButtonGroup.elements\";\r\n\r\nexport default function MessageView() {\r\n  const [reply, setReply] = useState(\"\");\r\n  const [replyOpen, setReplyOpen] = useState(false);\r\n  const [confirmDeletion, setConfirmDeletion] = useState(false);\r\n\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const currentUser = useSelector(state => state.user);\r\n\r\n  const sendReply = () => {\r\n    const message = {\r\n      sender_id: currentUser.userId,\r\n      recipient_id: location.state.senderId,\r\n      content: reply,\r\n      has_read: 0,\r\n      subject: `Re: ${location.state.subject}`\r\n    };\r\n    messageService.send(message);\r\n    history.push(\"/inbox\");\r\n  };\r\n\r\n  const handleDeleteMessage = () => {\r\n    messageService.deleteMessage(location.state.id);\r\n    history.push(\"/inbox\");\r\n  };\r\n\r\n  console.log(location.state);\r\n\r\n  return (\r\n    <Message>\r\n      <h2>{location.state.subject}</h2>\r\n      <div>\r\n        <Sender>{location.state.sender || \"Server\"}</Sender> |{\" \"}\r\n        <Time>\r\n          {moment(location.state.time).format(\"MMMM Do YYYY, h:mm:ss a\")}\r\n        </Time>\r\n      </div>\r\n      <MessageBody className=\"message-body\">{location.state.body}</MessageBody>\r\n      <ButtonGroup>\r\n        <li>\r\n          <Link to=\"/inbox\">Back</Link>\r\n        </li>\r\n        {location.state.sender ? (\r\n          <li>\r\n            <a onClick={() => setReplyOpen(true)}>Reply</a>\r\n          </li>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n\r\n        <div className=\"pos-rel\">\r\n          <li>\r\n            <span onClick={() => setConfirmDeletion(true)}>Delete</span>\r\n          </li>\r\n\r\n          {confirmDeletion && (\r\n            <DeleteConfirmation\r\n              confirmDelete={() => handleDeleteMessage()}\r\n              cancel={() => setConfirmDeletion(false)}\r\n            />\r\n          )}\r\n        </div>\r\n      </ButtonGroup>\r\n      {replyOpen && (\r\n        <ReplyForm>\r\n          <textarea\r\n            type=\"text\"\r\n            value={reply}\r\n            onChange={e => setReply(e.target.value)}\r\n          />\r\n          <div className=\"reply-options\">\r\n            <Button onClick={() => setReplyOpen(false)} color=\"white\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={sendReply} color=\"blue\">\r\n              Send\r\n            </Button>\r\n          </div>\r\n        </ReplyForm>\r\n      )}\r\n    </Message>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\SingleGroupView\\SingleGroupView.jsx",["399","400","401","402","403","404","405"],"import React, { useState, useEffect } from \"react\";\r\nimport { useRouteMatch, useLocation } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nimport GroupInfo from \"../GroupInfo/GroupInfo\";\r\nimport PostList from \"../PostList/PostList\";\r\nimport GroupActions from \"../GroupActions/GroupActions\";\r\n\r\nimport NotFound from \"../NotFound/NotFound\";\r\n\r\nimport { GroupHeader, GroupsLoading } from \"./SingleGroupView.elements\";\r\n\r\nimport postService from \"../../services/posts\";\r\nimport groupService from \"../../services/groups\";\r\n\r\nconst Pagination = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function SingleGroupView() {\r\n  const [sortBy, setSortBy] = useState(\"new\");\r\n  const [searchBy, setSearchBy] = useState(\"title\");\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [group, setGroup] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [badRequest, setBadRequest] = useState(null);\r\n\r\n  const match = useRouteMatch(\"/groups/:groupName\");\r\n\r\n  const [paginationOptions, setPaginationOptions] = useState({\r\n    type: \"GROUP_POSTS\",\r\n    groupName: match.params.groupName\r\n  });\r\n  const [postsToDisplay, setPostsToDisplay] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load\r\n\r\n    postService.countPages(paginationOptions).then(result => {\r\n      setMaxPages(result);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // When the page changes, fetch the appropriate data\r\n\r\n    postService.paginate(paginationOptions, currentPage).then(data => {\r\n      setPostsToDisplay(data);\r\n      setLoading(false);\r\n    });\r\n  }, [currentPage, paginationOptions]);\r\n\r\n  useEffect(() => {\r\n    const fetchGroup = async () => {\r\n      const group = await groupService.getGroupByName(match.params.groupName);\r\n      if (group) {\r\n        setGroup(group);\r\n        setLoading(false);\r\n      } else {\r\n        setBadRequest(true);\r\n      }\r\n    };\r\n    fetchGroup();\r\n  }, [match?.params.groupname]);\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {(() => {\r\n        if (!loading) {\r\n          return (\r\n            <>\r\n              {!!group && <GroupInfo group={group} />}\r\n              <GroupHeader>\r\n                <GroupActions group={group} />\r\n                <div></div>\r\n              </GroupHeader>\r\n              <PostList\r\n                sortBy={sortBy}\r\n                searchBy={searchBy}\r\n                searchTerm={searchTerm}\r\n                posts={postsToDisplay}\r\n              />\r\n              {postsToDisplay.length === 0 &&\r\n                <h3>This group doesn't have any posts. Submit one!</h3>\r\n              }\r\n              {postsToDisplay.length !== 0 && (\r\n                <Pagination>\r\n                  {currentPage > 1 && (\r\n                    <button\r\n                      className=\"pagination-button previous\"\r\n                      onClick={handlePrevButton}\r\n                    >\r\n                      Previous\r\n                    </button>\r\n                  )}\r\n\r\n                  <span>\r\n                    Page{\" \"}\r\n                    <input\r\n                      type=\"text\"\r\n                      value={pageInput}\r\n                      onChange={handlePageInput}\r\n                    />{\" \"}\r\n                    of {maxPages}\r\n                  </span>\r\n                  {currentPage < maxPages && (\r\n                    <button\r\n                      className=\"pagination-button next\"\r\n                      onClick={handleNextButton}\r\n                    >\r\n                      Next\r\n                    </button>\r\n                  )}\r\n                </Pagination>\r\n              )}\r\n            </>\r\n          );\r\n        } else if (badRequest) {\r\n          return <NotFound></NotFound>;\r\n        } else {\r\n          return <GroupsLoading>Loading</GroupsLoading>;\r\n        }\r\n      })()}\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Navigation\\Navigation.jsx",["406"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { logout } from \"../../reducers/userReducer\";\r\nimport { clearVotes as clearPostVotes } from \"../../reducers/userPostVotesReducer\";\r\nimport { clearVotes as clearCommentVotes } from \"../../reducers/commentVotesReducer\";\r\nimport { clearUserPosts } from \"../../reducers/userPostsReducer\";\r\nimport { clearSubscriptions } from \"../../reducers/groupSubscribesReducer\";\r\n\r\nimport UserCard from \"../UserCard/UserCard\";\r\n\r\nimport {\r\n  Navigation as Container,\r\n  Branding,\r\n  HamburgerMenu\r\n} from \"./Navigation.elements\";\r\nimport StyledLink from \"../shared/NavLink.elements\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nexport default function Navigation() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const hamburgerMenuRef = useRef(null);\r\n\r\n  const [hamburgerOpen, setHamburgerOpen] = useState(false);\r\n\r\n  const user = useSelector(state => {\r\n    return state.user;\r\n  });\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"loggedUser\");\r\n    dispatch(logout());\r\n    dispatch(clearUserPosts());\r\n    dispatch(clearPostVotes());\r\n    dispatch(clearCommentVotes());\r\n    dispatch(clearSubscriptions());\r\n\r\n    const userOnlyRoutes = [\r\n      \"/create\",\r\n      \"/creategroup\",\r\n      \"/inbox\",\r\n      \"/messages/compose\"\r\n    ];\r\n\r\n    if (userOnlyRoutes.find(route => window.location.pathname === route)) {\r\n      history.push(\"/\");\r\n    }\r\n\r\n    setHamburgerOpen(false);\r\n  };\r\n\r\n  const handleHamburgerMenu = () => {\r\n    setHamburgerOpen(prevState => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const detectMenuClick = e => {\r\n      if (e.target.matches(\".hamburger-menu *\")) {\r\n        if (e.target.matches(\"a\") || e.target.matches(\".branding-icon\")) {\r\n          // User redirected w/ hamburger menu\r\n          setHamburgerOpen(false);\r\n        }\r\n      } else {\r\n        // User clicked outside hamburger menu\r\n        setHamburgerOpen(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"click\", detectMenuClick);\r\n    return () => window.removeEventListener(\"click\", detectMenuClick);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <StyledLink to=\"/\">\r\n          <Branding></Branding>\r\n        </StyledLink>\r\n\r\n        <h2>\r\n          <StyledLink to=\"/groups\" className=\"groups-link\">\r\n            Groups\r\n          </StyledLink>\r\n        </h2>\r\n        {(() => {\r\n          if (user.username) {\r\n            return (\r\n              <UserCard username={user.username} handleLogout={handleLogout} />\r\n            );\r\n          } else {\r\n            return (\r\n              <ul>\r\n                <li>\r\n                  <StyledLink to=\"/login\">Log in</StyledLink>\r\n                </li>\r\n                <li>\r\n                  <StyledLink to=\"/register\">Register</StyledLink>\r\n                </li>\r\n              </ul>\r\n            );\r\n          }\r\n        })()}\r\n      </Container>\r\n      <HamburgerMenu ref={hamburgerMenuRef} className=\"hamburger-menu\">\r\n        <div className=\"top\">\r\n          <div className=\"container\">\r\n            <StyledLink to=\"/\">\r\n              <div className=\"branding-icon\"></div>\r\n            </StyledLink>\r\n\r\n            {!!user.userId && (\r\n              <div\r\n                className={`menu-bars ${hamburgerOpen ? \"open\" : \"\"}`}\r\n                onClick={() => handleHamburgerMenu()}\r\n              >\r\n                <div className=\"bar\"></div>\r\n                <div className=\"bar\"></div>\r\n                <div className=\"bar\"></div>\r\n              </div>\r\n            )}\r\n            {!user.userId && (\r\n              <nav className=\"mini-nav\">\r\n                <ul>\r\n                  <li>\r\n                    <StyledLink to=\"/groups\">Groups</StyledLink>\r\n                  </li>\r\n                  <li>\r\n                    <StyledLink to=\"/login\">Log in</StyledLink>\r\n                  </li>\r\n                  <li>\r\n                    <StyledLink to=\"/register\">Register</StyledLink>\r\n                  </li>\r\n                </ul>\r\n              </nav>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <nav className={`menu ${hamburgerOpen ? \"open\" : \"\"}`}>\r\n          <ul>\r\n            <li>\r\n              <StyledLink to=\"/\">Home</StyledLink>\r\n            </li>\r\n            <li>\r\n              <StyledLink to=\"/groups\">Groups</StyledLink>\r\n            </li>\r\n            <li>\r\n              <StyledLink to={`/users/${user.userId}`}>My Profile</StyledLink>\r\n            </li>\r\n            <li>\r\n              <StyledLink to=\"/inbox\">Inbox</StyledLink>\r\n            </li>\r\n            <li>\r\n              <StyledLink onClick={handleLogout}>Logout</StyledLink>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </HamburgerMenu>\r\n    </>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\HomePage\\HomePage.jsx",["407","408","409","410","411","412","413"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch, useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\n\r\nimport Link from \"../shared/NavLink.elements\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport PostList from \"../PostList/PostList\";\r\n\r\nimport postService from \"../../services/posts\";\r\n\r\nimport { setUser } from \"../../reducers/userReducer\";\r\n\r\nconst Container = styled.div`\r\n  .pagination-button {\r\n    font-size: 1rem;\r\n    &.previous {\r\n      margin-right: 1rem;\r\n    }\r\n    &.next {\r\n      margin-left: 1rem;\r\n    }\r\n  }\r\n  input {\r\n    width: 3rem;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default function HomePage() {\r\n  const user = useSelector(state => state.user);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageInput, setPageInput] = useState(currentPage);\r\n  const [maxPages, setMaxPages] = useState(null); // Determined by DB query\r\n  const [paginationOptions, setPaginationOptions] = useState({\r\n    type: \"ALL_POSTS\",\r\n    user: user.userId\r\n  });\r\n  const [postsToDisplay, setPostsToDisplay] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handlePageInput = e => {\r\n    // Allow integers only\r\n\r\n    let sanitizedInput = \"\";\r\n\r\n    for (let i = 0; i < e.target.value.length; i++) {\r\n      const currentCharCode = e.target.value.charAt(i).charCodeAt(0);\r\n      if (currentCharCode >= 48 && currentCharCode <= 57) {\r\n        sanitizedInput = sanitizedInput.concat(e.target.value.charAt(i));\r\n      }\r\n    }\r\n\r\n    // Cannot exceed max pages, must be at least 1\r\n    if (parseInt(sanitizedInput) > maxPages) {\r\n      sanitizedInput = maxPages;\r\n    } else if (sanitizedInput.length === 0) {\r\n      sanitizedInput = 1;\r\n    }\r\n\r\n    setPageInput(sanitizedInput);\r\n    setCurrentPage(sanitizedInput);\r\n  };\r\n\r\n  const handlePrevButton = () => {\r\n    setCurrentPage(prevState => prevState - 1);\r\n    setPageInput(prevState => prevState - 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  const handleNextButton = () => {\r\n    setCurrentPage(prevState => prevState + 1);\r\n    setPageInput(prevState => prevState + 1);\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Get the max # of pages needed on load\r\n\r\n    postService.countPages(paginationOptions).then(result => {\r\n      setMaxPages(result);\r\n    });\r\n\r\n    if (user.userId !== null) {\r\n      setPaginationOptions(prevState => ({ ...prevState, user: user.userId }));\r\n    } else {\r\n      // On user logout\r\n      setPaginationOptions(prevState => ({ ...prevState, user: null }));\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    // When the page changes, fetch the appropriate data\r\n    if (paginationOptions.type === \"ALL_POSTS\") {\r\n      postService.paginate(paginationOptions, currentPage).then(data => {\r\n        setPostsToDisplay(data);\r\n        setLoading(false);\r\n      });\r\n    }\r\n  }, [currentPage, paginationOptions]);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {maxPages === 0 && (\r\n          <h2>\r\n            Subscribe to your favorite <Link to=\"/groups\">groups</Link> to stay\r\n            up to date with the content you love ❤️\r\n          </h2>\r\n        )}\r\n        {!loading && (\r\n          <PostList searchBy=\"title\" searchTerm=\"\" posts={postsToDisplay} />\r\n        )}\r\n        {maxPages !== 0 && (\r\n          <>\r\n            {currentPage > 1 && (\r\n              <button\r\n                className=\"pagination-button previous\"\r\n                onClick={handlePrevButton}\r\n              >\r\n                Previous\r\n              </button>\r\n            )}\r\n\r\n            <span>\r\n              Page{\" \"}\r\n              <input type=\"text\" value={pageInput} onChange={handlePageInput} />{\" \"}\r\n              of {maxPages}\r\n            </span>\r\n            {currentPage < maxPages && (\r\n              <button\r\n                className=\"pagination-button next\"\r\n                onClick={handleNextButton}\r\n              >\r\n                Next\r\n              </button>\r\n            )}\r\n          </>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\NavLink.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\messages.js",["414"],"import axios from \"axios\";\r\n\r\nlet storedToken = null;\r\nconst baseUrl = process.env.BASE_URL || \"http://localhost:5000\";\r\n\r\nconst config = {\r\n  headers: {\r\n    Authorization: storedToken\r\n  }\r\n};\r\n\r\nconst setToken = token => {\r\n  storedToken = token;\r\n};\r\n\r\nconst getAll = async () => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n\r\n  const req = await axios.get(\"http://localhost:5000/messages\", config);\r\n  return req.data;\r\n};\r\n\r\nconst send = async message => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n\r\n  const req = await axios.post(\r\n    \"http://localhost:5000/messages\",\r\n    message,\r\n    config\r\n  );\r\n  return req.data;\r\n};\r\n\r\n// Sends a notification to all followers of the post including the author\r\nconst sendAll = async (message, postId) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n  try {\r\n    await axios.post(\r\n      `http://localhost:5000/messages/followers/${postId}`,\r\n      { message },\r\n      config\r\n    );\r\n  } catch (exception) {\r\n    console.log(exception);\r\n  }\r\n};\r\n\r\nconst setRead = async id => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n  axios.put(`http://localhost:5000/messages`, { id }, config);\r\n};\r\n\r\nconst deleteMessage = async id => {\r\n  const headers = {\r\n    Authorization: storedToken\r\n  };\r\n  axios.delete(`http://localhost:5000/messages`, {\r\n    data: {\r\n      id\r\n    },\r\n    headers\r\n  });\r\n};\r\n\r\nconst paginate = async (options, page) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n  const req = await axios.get(\r\n    `${baseUrl}/messages/paginate?filter=${options.type}&page=${page}`,\r\n    config\r\n  );\r\n  return req.data;\r\n};\r\n\r\nconst countPages = async options => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n  const req = await axios.get(\r\n    `${baseUrl}/messages/count?filter=${options.type}`,\r\n    config\r\n  );\r\n  return req.data.pages;\r\n};\r\n\r\nconst messageService = {\r\n  setToken,\r\n  getAll,\r\n  send,\r\n  sendAll,\r\n  setRead,\r\n  deleteMessage,\r\n  paginate,\r\n  countPages\r\n};\r\n\r\nexport default messageService;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\posts.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\userPostVotes.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\groups.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\userHistory.js",["415","416"],"import axios from \"axios\";\r\n\r\nlet storedToken = null;\r\nconst baseUrl = process.env.BASE_URL || \"http://localhost:5000\";\r\n\r\nconst setToken = token => {\r\n  storedToken = token;\r\n};\r\n\r\nconst config = {\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    \"Access-Control-Allow-Origin\": \"*\"\r\n  }\r\n};\r\n\r\nconst paginate = async (options, page) => {\r\n  const req = await axios.get(\r\n    `${baseUrl}/userhistory/paginate?filter=${options.type}&page=${page}&user=${options.userId}`\r\n  );\r\n  console.log(req.data);\r\n  return req.data;\r\n};\r\n\r\nconst countPages = async options => {\r\n  const req = await axios.get(\r\n    `${baseUrl}/userhistory/count?filter=${options.type}&user=${options.userId}`\r\n  );\r\n  console.log(req.data);\r\n  return req.data.pages;\r\n};\r\n\r\nconst userHistoryService = {\r\n  setToken,\r\n  paginate,\r\n  countPages\r\n};\r\n\r\nexport default userHistoryService;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\comments.js",["417"],"import axios from \"axios\";\r\n\r\nlet storedToken = null;\r\n\r\nconst setToken = token => {\r\n  storedToken = token;\r\n};\r\n\r\nconst getCommentsByPostId = async postId => {\r\n  const req = await axios.get(`http://localhost:5000/comments/post/${postId}`);\r\n  return req.data;\r\n};\r\n\r\nconst getCommentsByUserId = async userId => {\r\n  const req = await axios.get(`http://localhost:5000/comments/users/${userId}`);\r\n  const data = req.data.map(comment => {\r\n    return {\r\n      ...comment,\r\n      type: \"comment\"\r\n    };\r\n  });\r\n  return data;\r\n};\r\n\r\nconst getRootCommentsByPostId = async postId => {\r\n  const req = await axios.get(`http://localhost:5000/comments/post/${postId}`);\r\n  return req.data.filter(comment => comment.parent_id === null);\r\n};\r\n\r\nconst getCommentChildren = async commentId => {\r\n  const req = await axios.get(\r\n    `http://localhost:5000/comments/${commentId}/children`\r\n  );\r\n  return req.data;\r\n};\r\n\r\nconst editComment = (id, updatedContent) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n\r\n  axios.put(`http://localhost:5000/comments/${id}`, { updatedContent }, config);\r\n};\r\n\r\nconst add = async (user, comment, postId, parentId) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n\r\n  const newComment = {\r\n    comment,\r\n    postId,\r\n    parentId\r\n  };\r\n\r\n  const req = await axios.post(\r\n    `http://localhost:5000/comments/`,\r\n    newComment,\r\n    config\r\n  );\r\n  return req.data;\r\n};\r\n\r\nconst remove = id => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      Authorization: storedToken\r\n    }\r\n  };\r\n\r\n  axios.put(`http://localhost:5000/comments/${id}/remove`, null, config);\r\n};\r\n\r\nconst getCommentScoreById = async id => {\r\n  const req = await axios.get(`http://localhost:5000/comments/${id}/score`);\r\n  return req.data.score;\r\n};\r\n\r\nexport default {\r\n  getCommentsByPostId,\r\n  getRootCommentsByPostId,\r\n  getCommentsByUserId,\r\n  getCommentChildren,\r\n  editComment,\r\n  add,\r\n  remove,\r\n  getCommentScoreById,\r\n  setToken\r\n};\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\bookmarks.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\commentVotes.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\services\\users.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Form.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\SingleGroupView\\SingleGroupView.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\ButtonGroup.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\MessageView\\MessageView.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\InboxView\\InboxView.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\Button.elements.js",["418","419"],"import styled, { keyframes } from \"styled-components\";\r\n\r\nconst scrollUp = keyframes`\r\n  0% { transform: translateY(0%); }\r\n\t100% { transform: translateY(-50%); }\r\n`;\r\n\r\nexport const Button = styled.div`\r\n  display: inline-block;\r\n  border-radius: 3px;\r\n  border: 1px solid ${props => props.theme.cornflowerBlue};\r\n  padding: 5px;\r\n  transition: 0.2s all ease-out;\r\n  position: relative;\r\n  overflow: hidden;\r\n  /* width: 150px; */\r\n  user-select: none;\r\n\r\n  ${props => {\r\n    switch (props.color) {\r\n      case \"blue\":\r\n        return `\r\n          background-color: ${props.theme.cornflowerBlue};\r\n          color: white;\r\n          border: 1px solid ${props.theme.cornflowerBlue}\r\n        `;\r\n      case \"white\":\r\n        return `\r\n          background-color: none;\r\n          color: black;\r\n          border: 1px solid ${props.theme.cornflowerBlue}\r\n        `;\r\n      case \"pink-primary\":\r\n        return `\r\n          background-color: ${props.theme.persianPink};\r\n          color: white;\r\n          border: 1px solid ${props.theme.persianPink};\r\n          &:hover {\r\n            color: white;\r\n          }\r\n        `;\r\n    }\r\n  }}\r\n\r\n  ${props => {\r\n    switch (props.size) {\r\n      case \"fill\":\r\n        return `display: block;`;\r\n      default:\r\n        return `width: 150px;`;\r\n    }\r\n  }}\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const InvisText = styled.span`\r\n  color: transparent;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  text-align: center;\r\n  position: absolute;\r\n  top: 2px;\r\n  left: -1px;\r\n  width: 100%;\r\n  line-height: 1.8;\r\n  & > * {\r\n    display: block;\r\n  }\r\n  &:hover {\r\n    ${props => {\r\n      switch (props.color) {\r\n        case \"blue\":\r\n          return `\r\n          color: white;\r\n        `;\r\n        case \"pink-primary\":\r\n          return `\r\n          color: white;\r\n        `;\r\n        // case \"pink-secondary\":\r\n        // return `\r\n        //   color: ${props.theme.persianPink};\r\n        // `;\r\n      }\r\n    }}\r\n    animation: ${scrollUp} 0.2s ease-in-out;\r\n    animation-fill-mode: forwards;\r\n  }\r\n`;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Navigation\\Navigation.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Toast\\Toast.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\PostList.jsx",["420","421","422","423","424","425","426","427"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\n\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { initializePosts, removePost } from \"../../reducers/postsReducer\";\r\n\r\nimport Post from \"../Post/Post\";\r\n\r\nimport postListHelpers from \"./helpers\";\r\n\r\nimport { Container } from \"./PostList.elements\";\r\n\r\nconst PostList = ({ sortBy, searchBy, searchTerm, posts }) => {\r\n  const match = useRouteMatch(\"/groups/:group\");\r\n\r\n  const userPostVotes = useSelector(state => state.userPostVotes);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let postsToDisplay = posts;\r\n\r\n  // let postsToDisplay = useSelector(state => {\r\n  //   let posts = [];\r\n\r\n  //   if (!match) {\r\n  //     posts = state.posts;\r\n  //   } else {\r\n  //     posts = state.posts.filter(post => {\r\n  //       return post.groupName.toLowerCase() === match.params.group;\r\n  //     });\r\n  //   }\r\n\r\n  //   // Map posts that user voted on to the post list\r\n  //   userPostVotes.forEach(vote => {\r\n  //     if (posts.filter(post => post.postID === vote.post_id)) {\r\n  //       const votedPost = posts.indexOf(\r\n  //         posts.find(post => post.postID === vote.post_id)\r\n  //       );\r\n\r\n  //       posts[votedPost] = { vote: vote.vote_value, ...posts[votedPost] };\r\n  //     }\r\n  //   });\r\n\r\n  //   return posts\r\n  // });\r\n\r\n  // postsToDisplay = postListHelpers.sortPosts(\r\n  //   postListHelpers.filterPosts(postsToDisplay)\r\n  // );\r\n\r\n  useEffect(() => {\r\n    dispatch(initializePosts());\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      {postsToDisplay\r\n        .filter(post => {\r\n          if (searchBy === \"title\") {\r\n            return post.title.toLowerCase().includes(searchTerm.toLowerCase());\r\n          } else if (searchBy === \"content\") {\r\n            return post.content\r\n              .toLowerCase()\r\n              .includes(searchTerm.toLowerCase());\r\n          }\r\n        })\r\n        .map(post => (\r\n          <Post post={post} key={post.postID} />\r\n        ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupList\\GroupList.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FormWarning\\FormWarning.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Post\\Post.jsx",["428","429","430"],"import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport DeleteConfirmation from \"../DeleteConfirmation/DeleteConfirmation\";\r\n\r\nimport {\r\n  initializeVotes as initializePostVotes,\r\n  addVote,\r\n  removeVote,\r\n  switchVote\r\n} from \"../../reducers/userPostVotesReducer\";\r\nimport {\r\n  initializePosts,\r\n  removePost,\r\n  editPost\r\n} from \"../../reducers/postsReducer\";\r\n\r\nimport postService from \"../../services/posts\";\r\nimport userPostVotesService from \"../../services/userPostVotes\";\r\n\r\nimport {\r\n  Post as Container,\r\n  VoteContainer,\r\n  VoteButton,\r\n  Content,\r\n  PostOptions,\r\n  PostScore,\r\n  CommentCountSm,\r\n  CommentCountLg\r\n} from \"../PostList/PostList.elements\";\r\n\r\nimport { FormContainer, FormField } from \"../shared/Form.elements\";\r\nimport ButtonGroup from \"../shared/ButtonGroup.elements\";\r\nimport FollowButton from \"../FollowButton/FollowButton\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\nimport PostHeader from \"../shared/PostHeader\";\r\n\r\nconst Post = ({ post, options, expand, viewMode }) => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(state => state.user);\r\n  const userPosts = useSelector(state => state.userPosts);\r\n  const userPostVote = useSelector(state =>\r\n    state.userPostVotes.find(vote => {\r\n      return vote.post_id === post.post_id;\r\n    })\r\n  );\r\n  const [postScore, setPostScore] = useState(post.score);\r\n\r\n  const history = useHistory();\r\n\r\n  const [confirmDeletion, setConfirmDeletion] = useState(false);\r\n  const [editing, setEditing] = useState(false);\r\n  const [editValue, setEditValue] = useState(post.post_body);\r\n  const [postContent, setPostContent] = useState(post.post_body);\r\n\r\n  const handleVotePost = async (postId, clickedValue) => {\r\n    if (user.token === null) {\r\n      return history.push({\r\n        pathname: \"/login\",\r\n        state: {\r\n          headerMessage: \"Log in to vote on posts\",\r\n          creatingPost: false\r\n        }\r\n      });\r\n    }\r\n\r\n    if (userPostVote) {\r\n      // Determine whether to just remove the vote, or switch it\r\n\r\n      if (userPostVote.vote_value !== clickedValue) {\r\n        dispatch(switchVote(postId, clickedValue));\r\n        await userPostVotesService.changePostVote(postId, clickedValue);\r\n      } else {\r\n        dispatch(removeVote(postId));\r\n        await userPostVotesService.removePostVote(postId);\r\n      }\r\n    } else {\r\n      dispatch(addVote(postId, clickedValue));\r\n      await postService.vote(postId, clickedValue);\r\n    }\r\n\r\n    const newScore = await postService.getPostScore(postId);\r\n    setPostScore(newScore);\r\n  };\r\n\r\n  const handleEditPost = () => {\r\n    dispatch(editPost(post.post_id, editValue));\r\n    setPostContent(editValue);\r\n    setEditing(false);\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditing(false);\r\n    setEditValue(postContent);\r\n  };\r\n\r\n  const handleDeletePost = async postId => {\r\n    dispatch(removePost(postId));\r\n    if (viewMode) {\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const userOwnsPost = userPosts.find(userPost => {\r\n    return userPost === post.post_id;\r\n  });\r\n\r\n  return (\r\n    <Container key={post.post_id} expand={expand}>\r\n      <div>\r\n        <div>\r\n          {options !== false && (\r\n            <VoteContainer>\r\n              <VoteButton upvoted={userPostVote?.vote_value === 1 ? 1 : 0}>\r\n                <FontAwesome\r\n                  name=\"arrow-circle-up\"\r\n                  className=\"upvote\"\r\n                  onClick={() => handleVotePost(post.post_id, 1)}\r\n                />\r\n              </VoteButton>\r\n              <PostScore>{Math.max(postScore, 0)}</PostScore>\r\n\r\n              <VoteButton downvoted={userPostVote?.vote_value === -1 ? 1 : 0}>\r\n                <FontAwesome\r\n                  name=\"arrow-circle-down\"\r\n                  className=\"downvote\"\r\n                  onClick={() => handleVotePost(post.post_id, -1)}\r\n                />\r\n              </VoteButton>\r\n            </VoteContainer>\r\n          )}\r\n\r\n          <div style={{ flex: 1 }}>\r\n            <PostHeader\r\n              postLink={`/groups/${post.group_name.toLowerCase()}/${\r\n                post.post_id\r\n              }`}\r\n              title={post.title}\r\n              postAge={moment(post.created_at).fromNow()}\r\n              groupLink={`/groups/${post.group_name.toLowerCase()}`}\r\n              groupName={post.group_name}\r\n              author={post.username}\r\n              submitter_id={post.submitter_id}\r\n            />\r\n\r\n            {editing ? (\r\n              <FormContainer>\r\n                <FormField>\r\n                  <textarea\r\n                    value={editValue}\r\n                    onChange={e => setEditValue(e.target.value)}\r\n                  />\r\n                </FormField>\r\n                <ButtonGroup>\r\n                  <li onClick={handleEditPost} className=\"active\">\r\n                    Edit post\r\n                  </li>\r\n                  <li onClick={handleCancelEdit}>Cancel</li>\r\n                </ButtonGroup>\r\n              </FormContainer>\r\n            ) : (\r\n              <Content expand={expand}>{postContent}</Content>\r\n            )}\r\n\r\n            {options !== false && (\r\n              <PostOptions>\r\n                <div>\r\n                  {user.token && (\r\n                    <FollowButton\r\n                      followers={post.follows}\r\n                      postId={post.post_id}\r\n                    />\r\n                  )}\r\n                  {user && (\r\n                    <span>\r\n                      {userOwnsPost ? (\r\n                        <ButtonGroup>\r\n                          {viewMode && editing === false && (\r\n                            <li onClick={() => setEditing(true)}>Edit</li>\r\n                          )}\r\n\r\n                          <div className=\"pos-rel\">\r\n                            <li\r\n                              onClick={() =>\r\n                                setConfirmDeletion(!confirmDeletion)\r\n                              }\r\n                            >\r\n                              <FontAwesome name=\"trash\" /> Delete\r\n                            </li>\r\n                            {confirmDeletion && (\r\n                              <DeleteConfirmation\r\n                                confirmDelete={() =>\r\n                                  handleDeletePost(post.post_id)\r\n                                }\r\n                                cancel={() => setConfirmDeletion(false)}\r\n                              />\r\n                            )}\r\n                          </div>\r\n                        </ButtonGroup>\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n                <CommentCountLg>\r\n                  <div>\r\n                    <FontAwesome name=\"comments\" className=\"comment-icon\" />{\" \"}\r\n                    {post.total_comments} Comments\r\n                  </div>\r\n                </CommentCountLg>\r\n                <CommentCountSm>\r\n                  <div>\r\n                    <FontAwesome name=\"comments\" className=\"comment-icon\" />{\" \"}\r\n                    {post.total_comments}\r\n                  </div>\r\n                </CommentCountSm>\r\n              </PostOptions>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comments\\Comments.jsx",["431","432","433"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nimport { setRedirectPath } from \"../../reducers/redirectReducer\";\r\nimport { initializeBookmarks } from \"../../reducers/userBookmarksReducer\";\r\n\r\nimport { Container } from \"./Comments.elements\";\r\nimport { FormContainer, FormField } from \"../shared/Form.elements\";\r\nimport ButtonGroup from \"../shared/ButtonGroup.elements\";\r\nimport FollowButton from \"../FollowButton/FollowButton\";\r\n\r\nimport commentsService from \"../../services/comments\";\r\n\r\nimport Comment from \"../Comment/Comment\";\r\nimport messageService from \"../../services/messages\";\r\n\r\nexport default function Comments({ postId, submitterId, postTitle }) {\r\n  const dispatch = useDispatch();\r\n  const currentUser = useSelector(state => state.user);\r\n  const history = useHistory();\r\n\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState(\"\");\r\n  const [newCommentFormError, setNewCommentFormError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch root comments, its respective component will render its children recursively\r\n    const fetchComments = async () => {\r\n      const comments = await commentsService.getRootCommentsByPostId(postId);\r\n      setComments(comments);\r\n    };\r\n\r\n    fetchComments();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setNewCommentFormError(null);\r\n  }, [newComment]);\r\n\r\n  const handleSubmitComment = async (\r\n    user,\r\n    content,\r\n    postId,\r\n    repliedCommentId = null,\r\n    replying = false,\r\n    children = null,\r\n    setChildren = null\r\n  ) => {\r\n    if (content.trim().length === 0) {\r\n      return setNewCommentFormError(\"Comment cannot be empty\");\r\n    }\r\n\r\n    const newCommentObj = await commentsService.add(\r\n      user,\r\n      content,\r\n      postId,\r\n      repliedCommentId || null\r\n    );\r\n    if (replying) {\r\n      setChildren([...children, newCommentObj]);\r\n    } else {\r\n      // Not replying to a comment, begin a new thread\r\n      setComments([...comments, newCommentObj]);\r\n      setNewComment(\"\");\r\n      sendNotifications(user, content);\r\n    }\r\n  };\r\n\r\n  // Will send a notification to the post author and those who are following the post\r\n  const sendNotifications = (commentingUser, newComment) => {\r\n    const message = {\r\n      sender_id: null,\r\n      recipient_id: submitterId,\r\n      content: newComment,\r\n      has_read: 0,\r\n      subject: `User ${commentingUser.username} has responded to a post: ${postTitle}`\r\n    };\r\n\r\n    // Send a message to everyone following the post\r\n    messageService.sendAll(message, postId);\r\n\r\n    // Prevent sending a message to user if they're commenting on their own post\r\n    if (commentingUser.userId === submitterId) return;\r\n\r\n    messageService.send(message);\r\n  };\r\n\r\n  const handleLoginRedirect = () => {\r\n    const originalPath = window.location.pathname;\r\n    dispatch(setRedirectPath(originalPath));\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {(() => {\r\n        if (!currentUser) {\r\n          return (\r\n            <>\r\n              <Link onClick={handleLoginRedirect}>Log in</Link> to post a\r\n              comment\r\n            </>\r\n          );\r\n        } else {\r\n          return (\r\n            <FormContainer className=\"new-thread\">\r\n              <FormField>\r\n                <textarea\r\n                  value={newComment}\r\n                  onChange={e => setNewComment(e.target.value)}\r\n                />\r\n              </FormField>\r\n              <h3 className=\"warning\">{newCommentFormError}</h3>\r\n              <ButtonGroup>\r\n                <li\r\n                  className=\"active\"\r\n                  onClick={() =>\r\n                    handleSubmitComment(currentUser, newComment, postId)\r\n                  }\r\n                >\r\n                  Add comment\r\n                </li>\r\n              </ButtonGroup>\r\n            </FormContainer>\r\n          );\r\n        }\r\n      })()}\r\n      {comments.length === 0 ? (\r\n        <h2>Be the first one to comment!</h2>\r\n      ) : (\r\n        <>\r\n          <h2>Comments:</h2>\r\n          {comments\r\n            .sort((a, b) => {\r\n              return a.parent_id > b.parent_id ? -1 : 1;\r\n            })\r\n            .map(comment => {\r\n              return (\r\n                <Comment\r\n                  comment={comment}\r\n                  handleSubmitComment={handleSubmitComment}\r\n                  key={comment.comment_id}\r\n                />\r\n              );\r\n            })}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserCard\\UserCard.jsx",["434"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, ProfileImage, InboxLink } from \"./UserCard.elements\";\r\n\r\nconst StyledLink = styled(Link)`\r\n  color: #4385f5;\r\n  font-weight: bold;\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\n\r\nexport default function UserCard({ username, handleLogout }) {\r\n  const userId = useSelector(state => state.user.userId);\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        {/* <div>\r\n          <ProfileImage\r\n            src=\"https://i.pinimg.com/originals/51/f6/fb/51f6fb256629fc755b8870c801092942.png\"\r\n            alt=\"\"\r\n          />\r\n        </div> */}\r\n        <div>\r\n          <p>\r\n            <strong>\r\n              Signed in as{\" \"}\r\n              <StyledLink to={`/users/${userId}`}>{username}</StyledLink>\r\n            </strong>\r\n          </p>\r\n          <InboxLink to=\"/inbox\">\r\n            Inbox\r\n            {/* <span>1</span> */}\r\n          </InboxLink>\r\n          <StyledLink onClick={handleLogout}>Logout</StyledLink>\r\n        </div>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupActions\\GroupActions.jsx",["435","436"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport FontAwesome from \"react-fontawesome\";\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport {\r\n  subscribeToGroup,\r\n  unsubscribeFromGroup\r\n} from \"../../reducers/groupSubscribesReducer\";\r\nimport { setRedirectPath } from \"../../reducers/redirectReducer\";\r\n\r\nimport {\r\n  GroupActions as Container,\r\n  CreatePostButton\r\n} from \"./GroupActions.elements\";\r\n\r\nconst GroupActions = ({ group }) => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const loggedUser = useSelector(state => state.user);\r\n  const userSubscribedGroups = useSelector(state => state.subscribedGroups);\r\n\r\n  const groupMatch = useRouteMatch(\"/groups/:groupName\");\r\n\r\n  const handleCreatePostButton = () => {\r\n    if (loggedUser.userId !== null) {\r\n      history.push(`/create?group=${group.group_name}`);\r\n    } else {\r\n      dispatch(setRedirectPath(\"/create\"));\r\n      history.push({\r\n        pathname: \"/login\",\r\n        state: { headerMessage: \"Log in to create a post\", creatingPost: true }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubscribe = () => {\r\n    if (loggedUser.userId !== null) {\r\n      dispatch(subscribeToGroup(group, loggedUser));\r\n    } else {\r\n      history.push({\r\n        pathname: \"/login\",\r\n        state: {\r\n          headerMessage: \"Log in to subscribe to your favorite groups\",\r\n          subscribingToGroup: true\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleUnsubscribe = () => {\r\n    dispatch(unsubscribeFromGroup(group, loggedUser));\r\n  };\r\n\r\n  return (\r\n    <Container singleGroup={!group}>\r\n      <button onClick={handleCreatePostButton} className=\"create-post-button\">\r\n        <FontAwesome name=\"paper-plane\"></FontAwesome> Submit a new post\r\n      </button>\r\n\r\n      {group &&\r\n        loggedUser.token &&\r\n        (userSubscribedGroups.find(userGroup => {\r\n          return userGroup.group_id === group.group_id;\r\n        }) ? (\r\n          <button onClick={handleUnsubscribe}>\r\n            <FontAwesome name=\"check\"></FontAwesome>\r\n            {\" SUBSCRIBED\"}\r\n          </button>\r\n        ) : (\r\n          <button onClick={handleSubscribe}>\r\n            <FontAwesome name=\"bell\"></FontAwesome>\r\n            {\" Subscribe\"}\r\n          </button>\r\n        ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GroupActions;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\DeleteConfirmation\\DeleteConfirmation.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupInfo\\GroupInfo.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupCard\\GroupCard.jsx",["437"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport groupService from \"../../services/groups\";\r\n\r\nimport { CardWrapper, Card, GroupBlurb } from \"./GroupCard.elements\";\r\nimport NavLink from \"../shared/NavLink.elements\";\r\nimport { Button, InvisText, Container } from \"../shared/Button.elements\";\r\n\r\nimport {\r\n  subscribeToGroup,\r\n  unsubscribeFromGroup\r\n} from \"../../reducers/groupSubscribesReducer\";\r\n\r\nexport default function GroupCard({ group }) {\r\n  const [groupSubs, setGroupSubs] = useState(null);\r\n\r\n  const { group_name, blurb } = group;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const userSubscribedGroups = useSelector(state => state.subscribedGroups);\r\n  const loggedUser = useSelector(state => state.user);\r\n\r\n  const handleSubscribe = () => {\r\n    dispatch(subscribeToGroup(group, loggedUser));\r\n  };\r\n\r\n  const handleUnsubscribe = () => {\r\n    dispatch(unsubscribeFromGroup(group, loggedUser));\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchGroup = async groupName => {\r\n      const data = await groupService.getGroupByName(groupName);\r\n      setGroupSubs(data.subscribers);\r\n    };\r\n    fetchGroup(group.group_name);\r\n  }, []);\r\n\r\n  return (\r\n    <CardWrapper>\r\n      <Card>\r\n        <div>\r\n          <NavLink size={\"medium\"} to={`/groups/${group_name.toLowerCase()}`}>\r\n            {group_name}\r\n          </NavLink>\r\n          <GroupBlurb>{blurb}</GroupBlurb>\r\n        </div>\r\n\r\n        {(() => {\r\n          if (!loggedUser.token) return;\r\n\r\n          if (\r\n            userSubscribedGroups.find(group => group.group_name === group_name)\r\n          ) {\r\n            return (\r\n              <Button size={\"fill\"} onClick={handleUnsubscribe}>\r\n                <InvisText>Subscribed</InvisText>\r\n                <Container>\r\n                  <span>Subscribed</span>\r\n                  <span>Unsubscribe</span>\r\n                </Container>\r\n              </Button>\r\n            );\r\n          } else {\r\n            return (\r\n              <Button color={\"blue\"} size={\"fill\"} onClick={handleSubscribe}>\r\n                <InvisText>{groupSubs} subscribers</InvisText>\r\n                <Container>\r\n                  <span>{groupSubs} subscribers</span>\r\n                  <span>Subscribe</span>\r\n                </Container>\r\n              </Button>\r\n            );\r\n          }\r\n        })()}\r\n      </Card>\r\n    </CardWrapper>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\helpers.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\PostList\\PostList.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comments\\Comments.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\DeleteConfirmation\\DeleteConfirmation.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\UserCard\\UserCard.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupActions\\GroupActions.elements.js",["438","439","440","441","442"],"import styled, { css } from \"styled-components\";\r\nimport { Button } from \"../shared/Button.elements\";\r\n\r\nexport const GroupActions = styled.div`\r\n  display: block;\r\n  width: 100%;\r\n\r\n  margin-top: 1rem;\r\n  justify-content: space-between;\r\n  & > * {\r\n    padding: .625rem 2rem;\r\n    margin-right: 2rem;\r\n  }\r\n  & > *:last-child {\r\n    margin-right: 0;\r\n  }\r\n  \r\n  .create-post-button {\r\n    padding: .625rem 2rem;\r\n  }\r\n\r\n  @media (max-width: 1000px) {\r\n    margin-bottom: -1rem;\r\n    ${props => {\r\n      switch (props.singleGroup) {\r\n        case false:\r\n          return css`\r\n            margin-top: 5rem;\r\n          `;\r\n          break;\r\n        default:\r\n          return css`\r\n            margin-top: 1rem;\r\n          `;\r\n          break;\r\n      }\r\n    }}\r\n  }\r\n\r\n  @media (max-width: 630px) {\r\n    flex-direction: column;\r\n    & > * {\r\n      margin-right: 0;\r\n      margin-bottom: 1rem;\r\n    }\r\n    & > *:last-child {\r\n      margin-right: 0;\r\n    }\r\n  }\r\n\r\n  ${props => {\r\n    switch (props.singleGroup) {\r\n      case false:\r\n        return css`\r\n          display: flex;\r\n        `;\r\n        break;\r\n      default:\r\n        return css`\r\n          .create-post-button {\r\n            width: 50%;\r\n            @media (max-width: 800px) {\r\n              width: 100%;\r\n            }\r\n          }\r\n        `;\r\n        break;\r\n    }\r\n  }}\r\n`;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupInfo\\GroupInfo.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\PostHeader.jsx",["443"],"import NavLink from \"./NavLink.elements\";\r\nimport { Title, PostHeaderContainer } from \"./PostHeader.elements\";\r\n\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport useScreenWidth from \"../custom-hooks/useScreenWidth\";\r\n\r\nconst PostHeader = ({\r\n  postLink,\r\n  title,\r\n  postAge,\r\n  groupLink,\r\n  groupName,\r\n  author,\r\n  submitter_id\r\n}) => {\r\n  const width = useScreenWidth();\r\n\r\n  return (\r\n    <PostHeaderContainer>\r\n      <NavLink to={postLink}>\r\n        <Title>{title}</Title>{\" \"}\r\n      </NavLink>\r\n      posted <FontAwesome name=\"history\" className=\"fa-history\" /> {postAge} in{\" \"}\r\n      <span>\r\n        <NavLink to={`/groups/${groupName.toLowerCase()}`}>\r\n          <strong>{groupName}</strong>\r\n        </NavLink>\r\n      </span>{\" \"}\r\n      {author && (\r\n        <>\r\n          by{\" \"}\r\n          <NavLink to={`/users/${submitter_id}`}>\r\n            <strong>{author}</strong>\r\n          </NavLink>\r\n        </>\r\n      )}\r\n    </PostHeaderContainer>\r\n  );\r\n};\r\n\r\nexport default PostHeader;\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\GroupCard\\GroupCard.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FollowButton\\FollowButton.jsx",["444"],"import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport FontAwesome from \"react-fontawesome\";\r\n\r\nimport {\r\n  followPost,\r\n  unfollowPost,\r\n  initializeFollows\r\n} from \"../../reducers/userReducer\";\r\n\r\nimport {\r\n  StyledButton,\r\n  InvisText,\r\n  StyledContainer\r\n} from \"./FollowButton.elements\";\r\nexport default function FollowButton({ followers, postId }) {\r\n  const dispatch = useDispatch();\r\n  const userPostFollows = useSelector(state => {\r\n    return state.user.postFollows;\r\n  });\r\n\r\n  const follow = async () => {\r\n    dispatch(followPost(postId));\r\n    // dispatch(initializeFollows());\r\n  };\r\n\r\n  const unfollow = async () => {\r\n    dispatch(unfollowPost(postId));\r\n    // dispatch(initializeFollows());\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {(() => {\r\n        if (userPostFollows !== undefined && userPostFollows.includes(postId)) {\r\n          return (\r\n            <StyledButton color={\"pink-secondary\"} onClick={() => unfollow()}>\r\n              <InvisText>\r\n                <FontAwesome name=\"heart\" className=\"fa-heart\" /> Followed\r\n              </InvisText>\r\n              <StyledContainer>\r\n                <span>\r\n                  <FontAwesome name=\"heart\" className=\"fa-heart\" /> Followed\r\n                </span>\r\n                <span>Unfollow</span>\r\n              </StyledContainer>\r\n            </StyledButton>\r\n          );\r\n        } else {\r\n          return (\r\n            <StyledButton color={\"pink-primary\"} onClick={() => follow()}>\r\n              <InvisText>{followers} followers</InvisText>\r\n              <StyledContainer>\r\n                <span>{followers} followers</span>\r\n                <span>\r\n                  <FontAwesome name=\"heart\" className=\"fa-heart\" /> Follow\r\n                </span>\r\n              </StyledContainer>\r\n            </StyledButton>\r\n          );\r\n        }\r\n      })()}\r\n    </div>\r\n  );\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comment\\Comment.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\shared\\PostHeader.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\FollowButton\\FollowButton.elements.js",["445","446"],"import styled, { keyframes } from \"styled-components\";\r\nimport { Button, Container } from \"../shared/Button.elements\";\r\n\r\nexport const StyledButton = styled(Button)`\r\n  border: 1px solid #fc74a4;\r\n  width: 150px;\r\n  margin-bottom: -3px;\r\n  transform: translateY(-0.25rem);\r\n  user-select: none;\r\n  margin: 10px 10px 0 10px;\r\n  margin-left: auto;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const StyledContainer = styled(Container)`\r\n  & > * {\r\n    display: block;\r\n  }\r\n  &:hover {\r\n    ${props => {\r\n      switch (props.color) {\r\n        case \"pink-primary\":\r\n          return `\r\n          color: white;\r\n        `;\r\n        case \"pink-secondary\":\r\n          return `\r\n          color: ${props.theme.persianPink};\r\n        `;\r\n      }\r\n    }}\r\n  }\r\n`;\r\n\r\nexport { InvisText } from \"../shared/Button.elements\";\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\Comment\\Comment.elements.js",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\custom-hooks\\useScreenWidth.jsx",["447"],"import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function useScreenWidth() {\r\n  const [screenWidth, setScreenWidth] = useState(window.innerWidth);\r\n\r\n  const updateWidth = () => {\r\n    setScreenWidth(window.innerWidth);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", updateWidth);\r\n    return () => window.removeEventListener(\"resize\", updateWidth);\r\n  });\r\n\r\n  return screenWidth;\r\n}\r\n","D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\BookmarkButton\\BookmarkButton.jsx",[],"D:\\webdev projects\\reddit-clone\\frontend\\app\\src\\components\\BookmarkButton\\BookMarkButton.elements.js",[],["448","449"],{"ruleId":"450","replacedBy":"451"},{"ruleId":"452","replacedBy":"453"},{"ruleId":"454","severity":1,"message":"455","line":3,"column":50,"nodeType":"456","messageId":"457","endLine":3,"endColumn":54},{"ruleId":"454","severity":1,"message":"458","line":9,"column":10,"nodeType":"456","messageId":"457","endLine":9,"endColumn":26},{"ruleId":"454","severity":1,"message":"459","line":31,"column":8,"nodeType":"456","messageId":"457","endLine":31,"endColumn":16},{"ruleId":"454","severity":1,"message":"460","line":39,"column":9,"nodeType":"456","messageId":"457","endLine":39,"endColumn":13},{"ruleId":"461","severity":1,"message":"462","line":62,"column":6,"nodeType":"463","endLine":62,"endColumn":8,"suggestions":"464"},{"ruleId":"454","severity":1,"message":"465","line":1,"column":8,"nodeType":"456","messageId":"457","endLine":1,"endColumn":20},{"ruleId":"454","severity":1,"message":"466","line":2,"column":8,"nodeType":"456","messageId":"457","endLine":2,"endColumn":21},{"ruleId":"454","severity":1,"message":"467","line":2,"column":8,"nodeType":"456","messageId":"457","endLine":2,"endColumn":19},{"ruleId":"454","severity":1,"message":"468","line":2,"column":10,"nodeType":"456","messageId":"457","endLine":2,"endColumn":23},{"ruleId":"454","severity":1,"message":"469","line":2,"column":25,"nodeType":"456","messageId":"457","endLine":2,"endColumn":35},{"ruleId":"454","severity":1,"message":"470","line":3,"column":23,"nodeType":"456","messageId":"457","endLine":3,"endColumn":34},{"ruleId":"454","severity":1,"message":"471","line":5,"column":8,"nodeType":"456","messageId":"457","endLine":5,"endColumn":14},{"ruleId":"454","severity":1,"message":"472","line":7,"column":8,"nodeType":"456","messageId":"457","endLine":7,"endColumn":19},{"ruleId":"454","severity":1,"message":"473","line":9,"column":8,"nodeType":"456","messageId":"457","endLine":9,"endColumn":16},{"ruleId":"454","severity":1,"message":"474","line":13,"column":10,"nodeType":"456","messageId":"457","endLine":13,"endColumn":17},{"ruleId":"454","severity":1,"message":"475","line":92,"column":10,"nodeType":"456","messageId":"457","endLine":92,"endColumn":24},{"ruleId":"454","severity":1,"message":"476","line":92,"column":26,"nodeType":"456","messageId":"457","endLine":92,"endColumn":43},{"ruleId":"454","severity":1,"message":"477","line":93,"column":29,"nodeType":"456","messageId":"457","endLine":93,"endColumn":49},{"ruleId":"454","severity":1,"message":"478","line":97,"column":10,"nodeType":"456","messageId":"457","endLine":97,"endColumn":26},{"ruleId":"454","severity":1,"message":"479","line":98,"column":10,"nodeType":"456","messageId":"457","endLine":98,"endColumn":17},{"ruleId":"461","severity":1,"message":"480","line":142,"column":6,"nodeType":"463","endLine":142,"endColumn":12,"suggestions":"481"},{"ruleId":"461","severity":1,"message":"480","line":151,"column":6,"nodeType":"463","endLine":151,"endColumn":19,"suggestions":"482"},{"ruleId":"461","severity":1,"message":"483","line":34,"column":6,"nodeType":"463","endLine":34,"endColumn":16,"suggestions":"484"},{"ruleId":"454","severity":1,"message":"485","line":5,"column":10,"nodeType":"456","messageId":"457","endLine":5,"endColumn":21},{"ruleId":"454","severity":1,"message":"486","line":18,"column":9,"nodeType":"456","messageId":"457","endLine":18,"endColumn":17},{"ruleId":"454","severity":1,"message":"487","line":6,"column":8,"nodeType":"456","messageId":"457","endLine":6,"endColumn":14},{"ruleId":"454","severity":1,"message":"488","line":10,"column":10,"nodeType":"456","messageId":"457","endLine":10,"endColumn":20},{"ruleId":"454","severity":1,"message":"489","line":15,"column":10,"nodeType":"456","messageId":"457","endLine":15,"endColumn":17},{"ruleId":"461","severity":1,"message":"490","line":48,"column":6,"nodeType":"463","endLine":48,"endColumn":8,"suggestions":"491"},{"ruleId":"461","severity":1,"message":"462","line":34,"column":6,"nodeType":"463","endLine":34,"endColumn":50,"suggestions":"492"},{"ruleId":"454","severity":1,"message":"455","line":8,"column":10,"nodeType":"456","messageId":"457","endLine":8,"endColumn":14},{"ruleId":"454","severity":1,"message":"493","line":36,"column":20,"nodeType":"456","messageId":"457","endLine":36,"endColumn":31},{"ruleId":"454","severity":1,"message":"494","line":37,"column":22,"nodeType":"456","messageId":"457","endLine":37,"endColumn":35},{"ruleId":"454","severity":1,"message":"474","line":12,"column":10,"nodeType":"456","messageId":"457","endLine":12,"endColumn":17},{"ruleId":"454","severity":1,"message":"467","line":6,"column":8,"nodeType":"456","messageId":"457","endLine":6,"endColumn":19},{"ruleId":"454","severity":1,"message":"495","line":7,"column":8,"nodeType":"456","messageId":"457","endLine":7,"endColumn":22},{"ruleId":"454","severity":1,"message":"496","line":8,"column":8,"nodeType":"456","messageId":"457","endLine":8,"endColumn":23},{"ruleId":"461","severity":1,"message":"480","line":85,"column":6,"nodeType":"463","endLine":85,"endColumn":30,"suggestions":"497"},{"ruleId":"461","severity":1,"message":"480","line":93,"column":6,"nodeType":"463","endLine":93,"endColumn":43,"suggestions":"498"},{"ruleId":"454","severity":1,"message":"474","line":5,"column":10,"nodeType":"456","messageId":"457","endLine":5,"endColumn":17},{"ruleId":"454","severity":1,"message":"486","line":41,"column":9,"nodeType":"456","messageId":"457","endLine":41,"endColumn":17},{"ruleId":"461","severity":1,"message":"480","line":56,"column":6,"nodeType":"463","endLine":56,"endColumn":36,"suggestions":"499"},{"ruleId":"461","severity":1,"message":"480","line":64,"column":6,"nodeType":"463","endLine":64,"endColumn":43,"suggestions":"500"},{"ruleId":"454","severity":1,"message":"501","line":1,"column":27,"nodeType":"456","messageId":"457","endLine":1,"endColumn":36},{"ruleId":"454","severity":1,"message":"502","line":15,"column":3,"nodeType":"456","messageId":"457","endLine":15,"endColumn":10},{"ruleId":"503","severity":1,"message":"504","line":68,"column":13,"nodeType":"505","endLine":68,"endColumn":51},{"ruleId":"454","severity":1,"message":"506","line":2,"column":25,"nodeType":"456","messageId":"457","endLine":2,"endColumn":36},{"ruleId":"454","severity":1,"message":"507","line":33,"column":18,"nodeType":"456","messageId":"457","endLine":33,"endColumn":27},{"ruleId":"454","severity":1,"message":"493","line":34,"column":20,"nodeType":"456","messageId":"457","endLine":34,"endColumn":31},{"ruleId":"454","severity":1,"message":"494","line":35,"column":22,"nodeType":"456","messageId":"457","endLine":35,"endColumn":35},{"ruleId":"454","severity":1,"message":"477","line":42,"column":29,"nodeType":"456","messageId":"457","endLine":42,"endColumn":49},{"ruleId":"461","severity":1,"message":"480","line":57,"column":6,"nodeType":"463","endLine":57,"endColumn":8,"suggestions":"508"},{"ruleId":"461","severity":1,"message":"509","line":79,"column":6,"nodeType":"463","endLine":79,"endColumn":31,"suggestions":"510"},{"ruleId":"454","severity":1,"message":"472","line":20,"column":8,"nodeType":"456","messageId":"457","endLine":20,"endColumn":19},{"ruleId":"454","severity":1,"message":"468","line":2,"column":10,"nodeType":"456","messageId":"457","endLine":2,"endColumn":23},{"ruleId":"454","severity":1,"message":"469","line":2,"column":25,"nodeType":"456","messageId":"457","endLine":2,"endColumn":35},{"ruleId":"454","severity":1,"message":"471","line":5,"column":8,"nodeType":"456","messageId":"457","endLine":5,"endColumn":14},{"ruleId":"454","severity":1,"message":"472","line":9,"column":8,"nodeType":"456","messageId":"457","endLine":9,"endColumn":19},{"ruleId":"454","severity":1,"message":"474","line":15,"column":10,"nodeType":"456","messageId":"457","endLine":15,"endColumn":17},{"ruleId":"454","severity":1,"message":"486","line":46,"column":9,"nodeType":"456","messageId":"457","endLine":46,"endColumn":17},{"ruleId":"461","severity":1,"message":"480","line":96,"column":6,"nodeType":"463","endLine":96,"endColumn":12,"suggestions":"511"},{"ruleId":"454","severity":1,"message":"512","line":6,"column":7,"nodeType":"456","messageId":"457","endLine":6,"endColumn":13},{"ruleId":"454","severity":1,"message":"513","line":6,"column":3,"nodeType":"456","messageId":"457","endLine":6,"endColumn":14},{"ruleId":"454","severity":1,"message":"512","line":9,"column":7,"nodeType":"456","messageId":"457","endLine":9,"endColumn":13},{"ruleId":"514","severity":1,"message":"515","line":88,"column":1,"nodeType":"516","endLine":98,"endColumn":3},{"ruleId":"517","severity":1,"message":"518","line":20,"column":5,"nodeType":"519","messageId":"520","endLine":42,"endColumn":6},{"ruleId":"517","severity":1,"message":"518","line":75,"column":7,"nodeType":"519","messageId":"520","endLine":88,"endColumn":8},{"ruleId":"454","severity":1,"message":"521","line":1,"column":28,"nodeType":"456","messageId":"457","endLine":1,"endColumn":36},{"ruleId":"454","severity":1,"message":"522","line":3,"column":8,"nodeType":"456","messageId":"457","endLine":3,"endColumn":22},{"ruleId":"454","severity":1,"message":"523","line":7,"column":27,"nodeType":"456","messageId":"457","endLine":7,"endColumn":37},{"ruleId":"454","severity":1,"message":"524","line":11,"column":8,"nodeType":"456","messageId":"457","endLine":11,"endColumn":23},{"ruleId":"454","severity":1,"message":"525","line":16,"column":9,"nodeType":"456","messageId":"457","endLine":16,"endColumn":14},{"ruleId":"454","severity":1,"message":"526","line":18,"column":9,"nodeType":"456","messageId":"457","endLine":18,"endColumn":22},{"ruleId":"461","severity":1,"message":"462","line":55,"column":6,"nodeType":"463","endLine":55,"endColumn":8,"suggestions":"527"},{"ruleId":"528","severity":1,"message":"529","line":60,"column":22,"nodeType":"530","messageId":"531","endLine":60,"endColumn":24},{"ruleId":"454","severity":1,"message":"501","line":1,"column":27,"nodeType":"456","messageId":"457","endLine":1,"endColumn":36},{"ruleId":"454","severity":1,"message":"532","line":8,"column":22,"nodeType":"456","messageId":"457","endLine":8,"endColumn":41},{"ruleId":"454","severity":1,"message":"533","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":18},{"ruleId":"454","severity":1,"message":"534","line":6,"column":10,"nodeType":"456","messageId":"457","endLine":6,"endColumn":29},{"ruleId":"454","severity":1,"message":"535","line":11,"column":8,"nodeType":"456","messageId":"457","endLine":11,"endColumn":20},{"ruleId":"461","severity":1,"message":"536","line":35,"column":6,"nodeType":"463","endLine":35,"endColumn":8,"suggestions":"537"},{"ruleId":"454","severity":1,"message":"538","line":5,"column":21,"nodeType":"456","messageId":"457","endLine":5,"endColumn":33},{"ruleId":"454","severity":1,"message":"539","line":14,"column":3,"nodeType":"456","messageId":"457","endLine":14,"endColumn":19},{"ruleId":"454","severity":1,"message":"540","line":24,"column":9,"nodeType":"456","messageId":"457","endLine":24,"endColumn":19},{"ruleId":"461","severity":1,"message":"541","line":39,"column":6,"nodeType":"463","endLine":39,"endColumn":8,"suggestions":"542"},{"ruleId":"454","severity":1,"message":"543","line":2,"column":10,"nodeType":"456","messageId":"457","endLine":2,"endColumn":16},{"ruleId":"544","severity":1,"message":"545","line":30,"column":11,"nodeType":"546","messageId":"547","endLine":30,"endColumn":17},{"ruleId":"544","severity":1,"message":"545","line":35,"column":11,"nodeType":"546","messageId":"547","endLine":35,"endColumn":17},{"ruleId":"544","severity":1,"message":"545","line":57,"column":9,"nodeType":"546","messageId":"547","endLine":57,"endColumn":15},{"ruleId":"544","severity":1,"message":"545","line":67,"column":9,"nodeType":"546","messageId":"547","endLine":67,"endColumn":15},{"ruleId":"454","severity":1,"message":"548","line":17,"column":9,"nodeType":"456","messageId":"457","endLine":17,"endColumn":14},{"ruleId":"454","severity":1,"message":"549","line":8,"column":3,"nodeType":"456","messageId":"457","endLine":8,"endColumn":20},{"ruleId":"454","severity":1,"message":"550","line":1,"column":18,"nodeType":"456","messageId":"457","endLine":1,"endColumn":27},{"ruleId":"517","severity":1,"message":"518","line":23,"column":7,"nodeType":"519","messageId":"520","endLine":32,"endColumn":8},{"ruleId":"454","severity":1,"message":"551","line":1,"column":8,"nodeType":"456","messageId":"457","endLine":1,"endColumn":13},{"ruleId":"450","replacedBy":"552"},{"ruleId":"452","replacedBy":"553"},"no-native-reassign",["554"],"no-negated-in-lhs",["555"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'initializeGroups' is defined but never used.","'redditto' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["556"],"'postsReducer' is defined but never used.","'groupsReducer' is defined but never used.","'postService' is defined but never used.","'useRouteMatch' is defined but never used.","'useHistory' is defined but never used.","'useDispatch' is defined but never used.","'moment' is defined but never used.","'FontAwesome' is defined but never used.","'PostList' is defined but never used.","'setUser' is defined but never used.","'resultsPerPage' is assigned a value but never used.","'setResultsPerPage' is assigned a value but never used.","'setPaginationOptions' is assigned a value but never used.","'historyToDisplay' is assigned a value but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'paginationOptions'. Either include it or remove the dependency array.",["557"],["558"],"React Hook useEffect has missing dependencies: 'match.params.id' and 'user.token'. Either include them or remove the dependency array.",["559"],"'createGroup' is defined but never used.","'dispatch' is assigned a value but never used.","'Select' is defined but never used.","'createPost' is defined but never used.","'addVote' is defined but never used.","React Hook useEffect has a missing dependency: 'currentGroup'. Either include it or remove the dependency array.",["560"],["561"],"'setSearchBy' is assigned a value but never used.","'setSearchTerm' is assigned a value but never used.","'commentService' is defined but never used.","'bookmarkService' is defined but never used.",["562"],["563"],["564"],["565"],"'useEffect' is defined but never used.","'Actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useLocation' is defined but never used.","'setSortBy' is assigned a value but never used.",["566"],"React Hook useEffect has a missing dependency: 'match.params.groupName'. Either include it or remove the dependency array.",["567"],["568"],"'config' is assigned a value but never used.","'storedToken' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","'InfiniteScroll' is defined but never used.","'removePost' is defined but never used.","'postListHelpers' is defined but never used.","'match' is assigned a value but never used.","'userPostVotes' is assigned a value but never used.",["569"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'initializePostVotes' is defined but never used.","'initializePosts' is defined but never used.","'initializeBookmarks' is defined but never used.","'FollowButton' is defined but never used.","React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["570"],"'ProfileImage' is defined but never used.","'CreatePostButton' is defined but never used.","'groupMatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'group.group_name'. Either include it or remove the dependency array.",["571"],"'Button' is defined but never used.","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'width' is assigned a value but never used.","'initializeFollows' is defined but never used.","'keyframes' is defined but never used.","'React' is defined but never used.",["554"],["555"],"no-global-assign","no-unsafe-negation",{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},{"desc":"586","fix":"587"},{"desc":"588","fix":"589"},{"desc":"586","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"574","fix":"595"},{"desc":"572","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},"Update the dependencies array to be: [dispatch]",{"range":"601","text":"602"},"Update the dependencies array to be: [paginationOptions, user]",{"range":"603","text":"604"},"Update the dependencies array to be: [currentPage, paginationOptions]",{"range":"605","text":"606"},"Update the dependencies array to be: [dispatch, match.params.id, user.token]",{"range":"607","text":"608"},"Update the dependencies array to be: [currentGroup]",{"range":"609","text":"610"},"Update the dependencies array to be: [username, email, password, confirmPassword, dispatch]",{"range":"611","text":"612"},"Update the dependencies array to be: [paginationOptions, paginationOptions.type]",{"range":"613","text":"614"},"Update the dependencies array to be: [currentPage, paginationOptions, paginationOptions.type]",{"range":"615","text":"616"},"Update the dependencies array to be: [user, paginationOptions.type, paginationOptions]",{"range":"617","text":"618"},{"range":"619","text":"616"},"Update the dependencies array to be: [paginationOptions]",{"range":"620","text":"621"},"Update the dependencies array to be: [match.params.groupName, match.params.groupname]",{"range":"622","text":"623"},{"range":"624","text":"604"},{"range":"625","text":"602"},"Update the dependencies array to be: [postId]",{"range":"626","text":"627"},"Update the dependencies array to be: [group.group_name]",{"range":"628","text":"629"},[2512,2514],"[dispatch]",[3424,3430],"[paginationOptions, user]",[3671,3684],"[currentPage, paginationOptions]",[1043,1053],"[dispatch, match.params.id, user.token]",[1711,1713],"[currentGroup]",[1058,1102],"[username, email, password, confirmPassword, dispatch]",[2262,2286],"[paginationOptions, paginationOptions.type]",[2506,2543],"[currentPage, paginationOptions, paginationOptions.type]",[1624,1654],"[user, paginationOptions.type, paginationOptions]",[1873,1910],[1760,1762],"[paginationOptions]",[2332,2357],"[match.params.groupName, match.params.groupname]",[2714,2720],[1587,1589],[1382,1384],"[postId]",[1203,1205],"[group.group_name]"]